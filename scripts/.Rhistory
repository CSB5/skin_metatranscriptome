mgx_candidate_virus_g_counts_filt_fmt$host_fmt <- factor(mgx_candidate_virus_g_counts_filt_fmt$host_fmt,
levels=c("Cutibacterium", "Staphylococcus",
"Human", "Other_microbes"))
ggplot(mgx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_reads_to_genome_len)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~region, ncol=3, nrow=2, scales='free')
mgx_candidate_virus_g_counts_filt$coverage <- mgx_candidate_virus_g_counts_filt$read_pairs_rooted_at_genus / mgx_candidate_virus_g_counts_filt$median_genome_length
mgx_candidate_virus_g_counts_filt$coverage <- mgx_candidate_virus_g_counts_filt$read_pairs_rooted_at_genus / mgx_candidate_virus_g_counts_filt$median_genome_length
mgx_candidate_virus_g_counts_filt$distinct_minimizer_to_coverage <- mgx_candidate_virus_g_counts_filt$distinct_minimizer_count/mgx_candidate_virus_g_counts_filt$coverage
#filter for virus presence (>= 50 reads done earlier) and observed in at least three samples per skin site.
mgx_candidate_virus_g_counts_filt_fmt <- lapply(c("Sc", "Ch", "Vf", "Ac", "Tw"), function(site){
site_virus_vector <- mgx_virus_genus_presence_filt[[site]]$k2_taxon
site_df <- mgx_candidate_virus_g_counts_filt %>% dplyr::filter(region == site) %>%
dplyr::filter(k2_taxon %in% site_virus_vector)
site_df <- merge(site_df, candidate_virus_hosts, all.x=TRUE)
return(site_df)
}) %>% do.call("rbind",.)
mgx_candidate_virus_g_counts_filt_fmt$host_fmt <- factor(mgx_candidate_virus_g_counts_filt_fmt$host_fmt,
levels=c("Cutibacterium", "Staphylococcus",
"Human", "Other_microbes"))
ggplot(mgx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_coverage)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~region, ncol=3, nrow=2, scales='free')
101/18292.0
2/0.005521539
mgx_candidate_virus_g_counts_filt$distinct_minimizer_to_genome <- mgx_candidate_virus_g_counts_filt$distinct_minimizer_count/mgx_candidate_virus_g_counts_filt$median_genome_length
#filter for virus presence (>= 50 reads done earlier) and observed in at least three samples per skin site.
mgx_candidate_virus_g_counts_filt_fmt <- lapply(c("Sc", "Ch", "Vf", "Ac", "Tw"), function(site){
site_virus_vector <- mgx_virus_genus_presence_filt[[site]]$k2_taxon
site_df <- mgx_candidate_virus_g_counts_filt %>% dplyr::filter(region == site) %>%
dplyr::filter(k2_taxon %in% site_virus_vector)
site_df <- merge(site_df, candidate_virus_hosts, all.x=TRUE)
return(site_df)
}) %>% do.call("rbind",.)
mgx_candidate_virus_g_counts_filt_fmt$host_fmt <- factor(mgx_candidate_virus_g_counts_filt_fmt$host_fmt,
levels=c("Cutibacterium", "Staphylococcus",
"Human", "Other_microbes"))
ggplot(mgx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_genome)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~region, ncol=3, nrow=2, scales='free')
mtx_candidate_virus_g_counts_filt$distinct_minimizer_to_genome <- mtx_candidate_virus_g_counts_filt$distinct_minimizer_count / mtx_candidate_virus_g_counts_filt$median_genome_length
#filter for virus presence (>= 50 reads done earlier) and observed in at least three samples per skin site.
mtx_candidate_virus_g_counts_filt_fmt <- lapply(c("Sc", "Ch", "Vf", "Ac", "Tw"), function(site){
site_virus_vector <- mtx_virus_genus_presence_filt[[site]]$k2_taxon
site_df <- mtx_candidate_virus_g_counts_filt %>% dplyr::filter(region == site) %>%
dplyr::filter(k2_taxon %in% site_virus_vector)
site_df <- merge(site_df, candidate_virus_hosts, all.x=TRUE)
return(site_df)
}) %>% do.call("rbind",.)
mtx_candidate_virus_g_counts_filt_fmt$host_fmt <- factor(mtx_candidate_virus_g_counts_filt_fmt$host_fmt,
levels=c("Cutibacterium", "Staphylococcus",
"Other_microbes", "Plant"))
virus_host_comparisons_2 <- list(c("Cutibacterium", "Other_microbes"),
c("Staphylococcus", "Other_microbes"),
c("Plant", "Other_microbes"))
ggplot(mtx_candidate_virus_g_counts_filt_fmt, aes(x=k2_taxon, y=distinct_minimizer_to_genome)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(mtx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_genome)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(mtx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_genome)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_compare_means(method="wilcox.test", comparisons = virus_host_comparisons_2) +
facet_wrap(~region, ncol=3, nrow=2, scales='free') +
ggtitle("Metatranscriptomes")
mtx_candidate_virus_g_counts_filt$distinct_minimizer_to_genome_to_reads <- mtx_candidate_virus_g_counts_filt$distinct_minimizer_to_genome / mtx_candidate_virus_g_counts_filt$read_pairs_rooted_at_genus
ggplot(mtx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_genome_to_reads)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_compare_means(method="wilcox.test", comparisons = virus_host_comparisons_2) +
facet_wrap(~region, ncol=3, nrow=2, scales='free') +
ggtitle("Metatranscriptomes")
#filter for virus presence (>= 50 reads done earlier) and observed in at least three samples per skin site.
mtx_candidate_virus_g_counts_filt_fmt <- lapply(c("Sc", "Ch", "Vf", "Ac", "Tw"), function(site){
site_virus_vector <- mtx_virus_genus_presence_filt[[site]]$k2_taxon
site_df <- mtx_candidate_virus_g_counts_filt %>% dplyr::filter(region == site) %>%
dplyr::filter(k2_taxon %in% site_virus_vector)
site_df <- merge(site_df, candidate_virus_hosts, all.x=TRUE)
return(site_df)
}) %>% do.call("rbind",.)
mtx_candidate_virus_g_counts_filt_fmt$host_fmt <- factor(mtx_candidate_virus_g_counts_filt_fmt$host_fmt,
levels=c("Cutibacterium", "Staphylococcus",
"Other_microbes", "Plant"))
virus_host_comparisons_2 <- list(c("Cutibacterium", "Other_microbes"),
c("Staphylococcus", "Other_microbes"),
c("Plant", "Other_microbes"))
ggplot(mtx_candidate_virus_g_counts_filt_fmt, aes(x=host_fmt, y=distinct_minimizer_to_genome_to_reads)) +
geom_boxplot() +
theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_compare_means(method="wilcox.test", comparisons = virus_host_comparisons_2) +
facet_wrap(~region, ncol=3, nrow=2, scales='free') +
ggtitle("Metatranscriptomes")
View(mtx_candidate_virus_g_counts_filt_fmt)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
mock_comm_DNA_metadata <- read_tsv("../metadata/mock_comm_DNA_metadata.txt", show_col_types = FALSE)
mock_comm_DNA_composition <- read_tsv("../metadata/mock_comm_DNA_composition.txt", show_col_types = FALSE)
#mock_comm_DNA_composition$species <- gsub(pattern=" ", replacement="_",x=mock_comm_DNA_composition$species)
mock_comm_DNA_composition$species <- gsub(pattern="_MRSA|_VRE", replacement="",x=mock_comm_DNA_composition$species)
#S enterica is S typhi
mock_comm_DNA_composition$species <- gsub(pattern="typimurium", replacement="enterica",x=mock_comm_DNA_composition$species)
library(tidyverse)
library(reshape2)
library(ggpubr)
library(vegan)
library(gtools)
#functions
source("custom_functions.R")
metadata <- read_tsv("../metadata/skin_mtx_metadata_fmt.txt", show_col_types = FALSE)
mgx_stats <- read_tsv("../metadata/MGX_QC_stats.txt", show_col_types = FALSE)
mtx_stats <- read_tsv("../metadata/MTX_QC_stats.txt", show_col_types = FALSE)
mgx_stats <- merge(mgx_stats, metadata, by = "LIBID", all.x=TRUE)
mtx_stats <- merge(mtx_stats, metadata, by ="LIBID", all.x=TRUE)
#mtx_to_pull and mgx_to_pull refer to the 102 Libraries with paired MTX and MGX data:
mtx_to_pull <- read_tsv("../metadata/mtx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mgx_to_pull <- read_tsv("../metadata/mgx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mtx_stats_chosen <- mtx_stats %>% dplyr::filter(LIBID %in% mtx_to_pull)
mgx_stats_chosen <- mgx_stats %>% dplyr::filter(LIBID %in% mgx_to_pull)
mtx_mgx_stats_chosen <- read_tsv(file="../metadata/mtx_mgx_stats_chosen.tsv", show_col_types = FALSE)
#
mtx_to_M_globosa_QC <- read_csv("../metadata/mtx_for_M_globosa_mapping.csv")
mtx_to_M_globosa_QC$mapped_to_species <- "Malassezia_globosa"
mtx_to_M_restricta_QC <- read_csv("../metadata/mtx_for_M_restricta_mapping.csv")
mtx_to_M_restricta_QC$mapped_to_species <- "Malassezia_restricta"
########################################################
##metadata and read count information for pilot cohort##
########################################################
non_ribodepleted_mtx <- read_tsv("../metadata/no_ribodepletion_MTX_QC_stats.txt", show_col_types = FALSE)
pilot_cohort_read_count_QC <- read_tsv("../metadata/pilot_MTX_QC_stats.txt", show_col_types = FALSE)
#excluding pilot negative controls
pilot_cohort_samples_read_count_QC <- pilot_cohort_read_count_QC %>% dplyr::filter(!LIBID %in% c("Neg012",
"Neg013", "Neg014"))
pilot_QC_wetlab_metadata <- read_tsv("../metadata/pilot_cohort_RNA_wetlab_QC.txt", show_col_types = FALSE)
tech_reps_a <- metadata %>% dplyr::filter(subj_region %in% c("SMT001_Tw","SMT023_Ch","SMT023_Ac") & mol_type=="RNA")
tech_reps_b <- metadata %>% dplyr::filter(comments == "technical replicate analysis" & subj_region != "3 Bac (VV:LM:PS)")
tech_reps <- c(tech_reps_a$LIBID, tech_reps_b$LIBID)
tech_reps_metadata <- metadata %>% dplyr::filter(LIBID %in% tech_reps)
#metadata for the longitudinal cohort
longitudinal_metadata <- read_tsv("../metadata/skin_mtx_longitudinal_metadata.txt", show_col_types = FALSE) %>%
dplyr::filter(!subject %in% c("Neg012","Neg013","Neg014"))
longitudinal_metadata$LIBID <- longitudinal_metadata$subj_region
longitudinal_metadata$sequenced <- ifelse(longitudinal_metadata$low_conc == "fail", FALSE, TRUE)
longitudinal_metadata <- longitudinal_metadata %>% mutate_at('sequenced', ~replace_na(.,TRUE))
#Only "passed" samples were sent for sequencing
longitudinal_metadata_passed <- longitudinal_metadata %>% dplyr::filter(sequenced == TRUE)
MC_library_metadata <- read_tsv("../metadata/ERCC_and_mock_comm_mtx_metadata.txt", show_col_types = FALSE,
skip = 1, col_names = c("sample","ERCC_mix",
"input_RNA_conc",
"dilution_factor",
"RNA_input_ng",
"vol_input",
"UMI",
"PCR_cycles",
"library_conc_pg_per_ul",
"library_conc_ng_per_ul",
"library_volume_ul",
"dilution_fraction",
"LIBID")) %>%
dplyr::filter(str_detect(pattern = "MC", string=.$sample))
#For mock community A (MC5)
MC5_perms <- MC_library_metadata %>%
dplyr::filter(str_detect(pattern = "MC5", string=.$sample))
MC5_perms <- permutations(n=length(MC5_perms$LIBID), r=2, v = MC5_perms$LIBID)
MC5_perms <- apply(MC5_perms, 1, paste0, collapse = "-")
#For mock community B  (MC19)
MC19_perms <- MC_library_metadata %>%
dplyr::filter(str_detect(pattern = "MC19", string=.$sample))
MC19_perms <- permutations(n=length(MC19_perms$LIBID), r=2, v = MC19_perms$LIBID)
MC19_perms <- apply(MC19_perms, 1, paste0, collapse = "-")
MC_species <- read_tsv("../metadata/mock_comm_DNA_composition.txt")
#filter for MC5 and MC19, since these were the ones sequenced.
MC_species_filt <- MC_species %>% dplyr::filter(mock_comm_id %in% c("MC5-log10", "MC19-uniform")) %>%
mutate(species = gsub(pattern = "_VRE|_MRSA", replacement = "", x = species)) %>% pull(species) %>% unique(.)
#load kraken data
#TSS based on known ground truth species only
MC_rna_kraken_renorm_df <- lapply(MC_library_metadata$LIBID, function(x){
df <- read_tsv(file=paste0("../data/mock_comm_RNA_out/",x,"_k2.s.tsv"),
show_col_types = FALSE,
col_names = c("rel_abun","paired_counts",
"minimizer_count","distinct_minimizer_count",
"k2_taxon"))
df_filt <- df %>%
dplyr::filter(k2_taxon %in% MC_species_filt) %>%
dplyr::select(-rel_abun)
total_sum <- sum(df_filt$paired_counts)
#re-scaled relative abundance
df_filt$rel_abun <- (df_filt$paired_counts / total_sum) *100
df_filt$LIBID <- x
return(df_filt)
}) %>% do.call("rbind",.)
#Shape the data to appropriate form
MC_rna_kraken_renorm_df <- MC_rna_kraken_renorm_df %>% dplyr::select(LIBID,k2_taxon,rel_abun)
MC_rna_kraken_renorm_abun_table <- pivot_wider(MC_rna_kraken_renorm_df,
id_cols=k2_taxon, names_from=LIBID,
values_from=rel_abun) %>% as.data.frame()
MC_rna_kraken_renorm_abun_table[is.na(MC_rna_kraken_renorm_abun_table)] <- 0
rownames(MC_rna_kraken_renorm_abun_table) <- MC_rna_kraken_renorm_abun_table$k2_taxon
#for bcdist, rows must be samples and columns must be species, so we need to transpose
MC_rna_kraken_BC_dist <- ecodist::bcdist(t(MC_rna_kraken_renorm_abun_table %>% dplyr::select(-k2_taxon))) %>% as.matrix()
#both upper and lower triangles represented here
MC_rna_kraken_BC_dist <- reshape2::melt(MC_rna_kraken_BC_dist, varnames = c("row", "col"))
MC_rna_kraken_BC_dist <- MC_rna_kraken_BC_dist %>% dplyr::filter(col!=row)
##############################
#within same mock community
##############################
#comparison for selection purposes
MC_rna_kraken_BC_dist$comparison <- paste0(MC_rna_kraken_BC_dist$row,"-",MC_rna_kraken_BC_dist$col)
MC_rna_kraken_BC_dist_filt <- MC_rna_kraken_BC_dist %>% dplyr::filter(comparison %in% c(MC5_perms, MC19_perms))
MC_rna_kraken_BC_dist_filt$sorensen_similarity_species_level <- 1 - MC_rna_kraken_BC_dist_filt$value
median(MC_rna_kraken_BC_dist_filt$sorensen_similarity_species_level) #0.9894
#load pangene and unref90 lengths for mock comms after mapping
MC_pangene_len <- read_tsv("../data/mock_comm_RNA_out/all_mock_comm_pangene_nt_lengths_sorted.tsv",
show_col_types = FALSE,
col_names = c("pangene", "nt_length"))
MC_uniref90_len <- read_tsv("../data/mock_comm_RNA_out/all_mock_comm_uniref90_AA_lengths_sorted.tsv",
show_col_types = FALSE,
col_names = c("uniref90_ID", "AA_length"))
#collect bacteria OG annotations (eggnog) for the set of genes in the mock comms
MC_bact_og_annots <- lapply(MC_library_metadata$LIBID, function(x){
pangene_features <- read_tsv(paste0("../data/mock_comm_RNA_out/",x, "_panalign_annot.tsv"),
show_col_types = FALSE) %>%
dplyr::select(pangene,  emapper_OG) %>% dplyr::filter(emapper_OG != "-") %>%
dplyr::filter(str_detect(string=.$emapper_OG, pattern="Bacteria"))
#If there are multiple OGs belonging to bacteria, then this function just takes the more specific/narrower (right-most) term that is still "Bacteria".
pangene_features$bacteria_OG <- gsub(pattern = "(.*,)(.*)(@2\\|Bacteria.*)", replacement = "\\2",pangene_features$emapper_OG)
uniref90_features <- read_tsv(paste0("../data/mock_comm_RNA_out/",x, "_transl-search_annot.tsv"),
show_col_types = FALSE) %>% dplyr::select(uniref90_ID,  emapper_OG) %>% dplyr::filter(emapper_OG != "-") %>%
dplyr::filter(str_detect(string=.$emapper_OG, pattern="Bacteria"))
uniref90_features$bacteria_OG <- gsub(pattern = "(.*,)(.*)(@2\\|Bacteria.*)", replacement = "\\2",uniref90_features$emapper_OG)
output <- tibble::lst(pangene_features, uniref90_features)
return(output)
})
names(MC_bact_og_annots) <- MC_library_metadata$LIBID
MC_TPM_norm_dataset <- lapply(MC_library_metadata$LIBID, function(x){
summary_df <- read_tsv(paste0("../data/mock_comm_RNA_out/",x, "_all_aligned_taxonomy_summary_MC_species.tsv"),
show_col_types = FALSE, col_names = c("read_counts",
"pangene",
"k2_taxon",
"uniref90_ID"))
#For pangenes with >= 50% read coverage
pangenes_passed <- read_tsv(paste0("../data/mock_comm_RNA_out/",x, "_panalign_annot.tsv"),
show_col_types = FALSE) %>% pull(pangene) %>% unique(.)
pangene_df <- summary_df %>% dplyr::filter(pangene %in% pangenes_passed) %>% merge(.,MC_pangene_len, by = "pangene")
#Calculate TPM for pangenes
#convert nt length to kilobase scale
pangene_df$nt_length_kb <- (pangene_df$nt_length)/1000
pangene_df$RPK <- pangene_df$read_counts / pangene_df$nt_length_kb
#Sum RPKs by bacteria OGs
pangene_OG_annots <-  MC_bact_og_annots[[x]]$pangene_features
pangene_RPKs <- pangene_df %>% dplyr::select(pangene, read_counts, RPK) %>%
merge(.,pangene_OG_annots, by = "pangene") %>% dplyr::rename(feature=pangene)
#For Uniref90 features with >= 50% read coverage
uniref90_passed <- read_tsv(paste0("../data/mock_comm_RNA_out/",x, "_transl-search_annot.tsv"),
show_col_types = FALSE) %>% pull(uniref90_ID) %>% unique(.)
uniref90_df <- summary_df %>% dplyr::filter(pangene == "-") %>%
dplyr::filter(uniref90_ID %in% uniref90_passed) %>% merge(., MC_uniref90_len, by = "uniref90_ID")
##converting AA length to equivalent length in nt, then convert length to kilobase scale
uniref90_df$nt_length_kb <- (uniref90_df$AA_length * 3)/1000
uniref90_df$RPK <- uniref90_df$read_counts / uniref90_df$AA_length
#Sum RPKs by bacteria OGs associated with Uniref90 IDs
uniref90_OG_annots <-  MC_bact_og_annots[[x]]$uniref90_features
uniref90_RPKs <- uniref90_df %>% dplyr::select(uniref90_ID, read_counts, RPK) %>%
merge(.,uniref90_OG_annots, by = "uniref90_ID") %>% dplyr::rename(feature=uniref90_ID)
##################
#TPM calculations#
##################
feature_RPKs_combined <- rbind(pangene_RPKs, uniref90_RPKs) %>% group_by(bacteria_OG) %>%
summarise(read_count_sum=sum(read_counts), RPK_sum = sum(RPK)) %>% ungroup(.)
scaling_factor <- (sum(feature_RPKs_combined$RPK_sum))/1000000  #scaling factor per million
feature_RPKs_combined$TPM <- (feature_RPKs_combined$RPK_sum)/scaling_factor
feature_RPKs_combined$LIBID <- x
return(feature_RPKs_combined)
}) %>% do.call("rbind",.)
write_tsv(MC_TPM_norm_dataset, file="../data/mock_comm_RNA_out/MC_TPM_norm_dataset.tsv")
MC_TPM_mat <- pivot_wider(MC_TPM_norm_dataset, id_cols=bacteria_OG, names_from=LIBID,
values_from=TPM) %>% as.data.frame()
MC_TPM_mat[is.na(MC_TPM_mat)] <- 0
rownames(MC_TPM_mat) <- MC_TPM_mat$bacteria_OG
MC_TPM_mat <- MC_TPM_mat %>% dplyr::select(-bacteria_OG) %>% as.matrix()
MC_TPM_pearson_mat <- cor(MC_TPM_mat, method="pearson")
#both upper and lower triangles represented here
MC_TPM_pearson_df  <- reshape2::melt(MC_TPM_pearson_mat, varnames = c("row", "col"))
MC_TPM_pearson_df <- MC_TPM_pearson_df  %>% dplyr::filter(col!=row)
#comparison for selection purposes
MC_TPM_pearson_df$comparison <- paste0(MC_TPM_pearson_df$row,"-", MC_TPM_pearson_df$col)
MC_TPM_pearson_df_filt <- MC_TPM_pearson_df %>% dplyr::filter(comparison %in% c(MC5_perms, MC19_perms))
median(MC_TPM_pearson_df_filt$value) #0.9133064
View(MC_TPM_pearson_df_filt)
View(MC_species)
library(tidyverse)
library(reshape2)
#############################################################
#functions to load and process fastspar correlation matrices#
#############################################################
load_mat <- function(path_string){
result_df <- read_tsv(path_string, col_names = TRUE, show_col_types = FALSE) %>% as.data.frame() #setting rownames on tibble is depreciated
row.names(result_df) <- result_df$`#OTU ID`
result_df <- result_df[,-1]
output <- data.matrix(result_df)
return(output)
}
#Removes duplicates by taking lower triangle of corr and p value matrix from fastspar results, get corr coeff and p vals. Inputs are two matrices
get_edges_fn <- function(corr_mat, corr_pval){
df_corr <- melt(replace(corr_mat, lower.tri(corr_mat, TRUE), NA), na.rm = TRUE) %>% dplyr::rename(corr_coeff=value)
df_pval <- melt(replace(corr_pval, lower.tri(corr_pval, TRUE), NA), na.rm = TRUE)%>% dplyr::rename(pval=value)
output <- merge(df_corr, df_pval, by = c("Var1", "Var2") )
return(output)
}
find_contam_corr <- function(df, contam_genera=initial_contam_mask){
df_filtered <- df %>% dplyr::filter(str_detect(df$Var1, contam_genera) | str_detect(df$Var2, contam_genera) )
return(df_filtered)
}
disbiome_skin_res <- read_tsv("../metadata/mtx_contam_genera.tsv", show_col_types = FALSE)
initial_contam <- c(disbiome_skin_res %>%
filter(reported_for_skin_disease_in_disbiome == FALSE &
reported_on_skin_in_microphenoDB ==FALSE &
pubmed_skin_microbiome == FALSE) %>%
pull(name))
genera_to_remove <- c(disbiome_skin_res %>%
filter(reported_for_skin_disease_in_disbiome == FALSE &
reported_on_skin_in_microphenoDB ==FALSE &
pubmed_skin_microbiome == FALSE) %>%
pull(name), "Homo", "Listeria", "Plesiomonas", "Vibrio") #34 candidates to remove
MTX_corr <- load_mat("../../../skin_mtx/processed/fastspar/subj_MTX_median_correlation.tsv")
MGX_corr <- load_mat("../../../skin_mtx/processed/fastspar/subj_MGX_median_correlation.tsv")
MTX_pvalue <- load_mat("../../../skin_mtx/processed/fastspar/subj_MTX_fastspar_pvalues.tsv")
MGX_pvalue <- load_mat("../../../skin_mtx/processed/fastspar/subj_MGX_fastspar_pvalues.tsv")
MTX_corr_edge <- get_edges_fn(corr_mat=MTX_corr, corr_pval=MTX_pvalue)
MGX_corr_edge <- get_edges_fn(corr_mat=MGX_corr, corr_pval=MGX_pvalue)
MTX_corr_edge$padj <- p.adjust(MTX_corr_edge$pval, method="fdr")
MGX_corr_edge$padj <- p.adjust(MGX_corr_edge$pval, method="fdr")
#Get strong correlations
MTX_corr_edge_signif <- MTX_corr_edge %>% dplyr::filter(abs(corr_coeff)>=0.8 & padj < 0.05)
MGX_corr_edge_signif <- MGX_corr_edge %>% dplyr::filter(abs(corr_coeff)>=0.8 & padj < 0.05)
initial_contam_mask <- stringi::stri_paste("^",initial_contam, collapse="|")
MGX_corr_with_contam <- find_contam_corr(df=MGX_corr_edge_signif)
MTX_corr_with_contam <- find_contam_corr(df=MTX_corr_edge_signif)
#Store contaminants to remove in a vector
#Does not include Homo sapiens or unclassified yet
genera_mask <- stringi::stri_paste("^",genera_to_remove, collapse="|")
species_to_remove <- c(MGX_corr_with_contam$Var1, MGX_corr_with_contam$Var2,
MTX_corr_with_contam$Var1, MTX_corr_with_contam$Var2) %>% unique(.)
remove_spikes <- function(df, spike_genera=c("^Listeria|^Plesiomonas|^Vibrio")){
df_filtered <- df %>% dplyr::filter(str_detect(df$Var1, spike_genera, negate=TRUE) & str_detect(df$Var2, spike_genera, negate=TRUE) )
return(df_filtered)
}
MGX_corr_with_contam_no_spikes <- remove_spikes(MGX_corr_with_contam)
MGX_contam_for_plotting <- c(MGX_corr_with_contam_no_spikes$Var1,
MGX_corr_with_contam_no_spikes$Var2) %>% unique(.) %>% as.character(.)
#Get a vector of candidate contaminant species AND skin species from the filtered kraken2 MGX data
#k2_list can be MGX_species_k2_filtered
#contam_vec can be MGX_contam_for_plotting
get_skin_species_and_contams <- function(k2_list, contam_vec){
skin_vec <- do.call("rbind",k2_list) %>% pull(k2_taxon) %>% unique(.)
output_vec <- c(skin_vec, contam_vec) %>% unique(.)
return(output_vec)
}
mgx_to_pull <- read_tsv("../metadata/mgx_to_pull", show_col_types = FALSE, col_names = "LIBID") %>% pull(LIBID)
MGX_species_k2_filtered <- lapply(mgx_to_pull, function(x){
output <- read_tsv(file=paste0("../data/k2_species_renorm/DNA/",x,"_k2_renorm.s.tsv"),show_col_types = FALSE)
return(output)
})
MGX_species_k2_filtered <- lapply(mgx_to_pull, function(x){
output <- read_tsv(file=paste0("../data/k2_species_renorm/DNA/",x,"_k2_renorm.s.tsv"),show_col_types = FALSE)
return(output)
})
names(MGX_species_k2_filtered) <- mgx_to_pull
MGX_skin_species_and_contams <- get_skin_species_and_contams(k2_list=MGX_species_k2_filtered,
contam_vec = MGX_contam_for_plotting)
MGX_skin_species_and_contams_perm <- gtools::permutations(n=length(MGX_skin_species_and_contams),
r = 2, MGX_skin_species_and_contams) %>% as.data.frame()
MGX_skin_species_and_contams_perm$pattern <- paste0(MGX_skin_species_and_contams_perm$V1,
"_",
MGX_skin_species_and_contams_perm$V2)
#https://stackoverflow.com/questions/25935706/how-to-unmelt-data-with-reshape-r
get_corr_for_heatmap <- function(df, permutations_df){
df$pattern <- paste0(df$Var1,"_",df$Var2)
melted_output <- df %>% dplyr::filter(pattern %in% permutations_df$pattern) %>% dplyr::select(-pattern)
#need to add the same comparisons back to the matrix with correlation == 1, since they are the same feature
#need to add back the lower triangular for a symmetric matrix
species <- melted_output$Var1 %>% unique(.)
same_comparisons <- data.frame(Var1=species, Var2=species, corr_coeff=1, pval=NA, padj=NA)
melted_output_symm <- melted_output %>% dplyr::rename("Var2"="Var1", "Var1"="Var2")
corr_mat <- dcast(data=do.call("rbind",list(melted_output,melted_output_symm, same_comparisons)), formula=Var1~Var2, value.var="corr_coeff")
row.names(corr_mat) <- corr_mat$Var1
corr_mat <- corr_mat %>% dplyr::select(-Var1) %>% as.matrix()
output <- tibble::lst(melted_output, corr_mat)
return(output)
}
#output is a list
MGX_corr_edge_for_heatmap <- get_corr_for_heatmap(df=MGX_corr_edge, permutations_df = MGX_skin_species_and_contams_perm)
mgx_corr_contam_heatmap <- plot_ggheatmap(MGX_corr_edge_for_heatmap[["corr_mat"]])
MGX_corr_contam_heatmap_corr_mat <- MGX_corr_edge_for_heatmap[["corr_mat"]]
View(MGX_corr_contam_heatmap_corr_mat)
write.table(MGX_corr_contam_heatmap_corr_mat, file = "../data/MGX_corr_contam_heatmap_corr_mat.tsv", sep = "\t", row.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(vegan)
library(ggpubr)
#all samples
metadata <- read_tsv("../metadata/skin_mtx_metadata_fmt.txt", show_col_types = FALSE)
#For pilot cohort
pilot_QC_wetlab_metadata <- read_tsv("../metadata/pilot_cohort_RNA_wetlab_QC.txt", show_col_types = FALSE)
#distribution of libraries per site in the pilot QC, apart from the single sample with a tapestation error
plyr::count(pilot_QC_wetlab_metadata %>% dplyr::filter(!is.na(RIN)), vars="region")
tech_reps_a <- metadata %>% dplyr::filter(subj_region %in% c("SMT001_Tw","SMT023_Ch","SMT023_Ac") & mol_type=="RNA")
tech_reps_b <- metadata %>% dplyr::filter(comments == "technical replicate analysis" & subj_region != "3 Bac (VV:LM:PS)")
tech_reps <- c(tech_reps_a$LIBID, tech_reps_b$LIBID)
tech_reps_metadata <- metadata %>% dplyr::filter(LIBID %in% tech_reps)
#metadata for the longitudinal cohort
longitudinal_metadata <- read_tsv("../metadata/skin_mtx_longitudinal_metadata.txt", show_col_types = FALSE) %>%
dplyr::filter(!subject %in% c("Neg012","Neg013","Neg014"))
longitudinal_metadata$LIBID <- longitudinal_metadata$subj_region
longitudinal_metadata$sequenced <- ifelse(longitudinal_metadata$low_conc == "fail", FALSE, TRUE)
longitudinal_metadata <- longitudinal_metadata %>% mutate_at('sequenced', ~replace_na(.,TRUE))
#Only "passed" samples were sent for sequencing
longitudinal_metadata_passed <- longitudinal_metadata %>% dplyr::filter(sequenced == TRUE)
###For full cohort
mtx_to_pull <- read_tsv("../metadata/mtx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mgx_to_pull <- read_tsv("../metadata/mgx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
main_cohort_QC <- read_tsv("../metadata/MTX_QC_stats.txt", show_col_types = FALSE) %>%
dplyr::filter(LIBID %in% mtx_to_pull)
#
mgx_stats <- read_tsv("../metadata/MGX_QC_stats.txt", show_col_types = FALSE)
mgx_stats <- merge(mgx_stats, metadata, by = "LIBID", all.x=TRUE)
mgx_stats_chosen <- mgx_stats %>% dplyr::filter(LIBID %in% mgx_to_pull)
#see process_taxa_abundances.Rmd
mgx_k2_contam_read_pairs <- read_tsv("../data/mgx_k2_contaminant_read_pairs.tsv", show_col_types = FALSE) %>%
dplyr::rename(LIBID=mgx_LIBID)
mgx_stats_chosen <- merge(mgx_stats_chosen, mgx_k2_contam_read_pairs, by = "LIBID")
mgx_stats_chosen$MICROBE_COUNT_MINUS_CONTAM <- mgx_stats_chosen$MICROBE_COUNT - mgx_stats_chosen$estimated_contaminant_read_pairs
#
mtx_stats <- read_tsv("../metadata/MTX_QC_stats.txt", show_col_types = FALSE)
mtx_stats <- merge(mtx_stats, metadata, by = "LIBID", all.x=TRUE)
mtx_stats_chosen <- mtx_stats %>% dplyr::filter(LIBID %in% mtx_to_pull)
#see process_taxa_abundances.Rmd
mtx_k2_contam_read_pairs <- read_tsv("../data/mtx_k2_contaminant_read_pairs.tsv", show_col_types = FALSE) %>%
dplyr::rename(LIBID=mtx_LIBID)
mtx_stats_chosen <- merge(mtx_stats_chosen, mtx_k2_contam_read_pairs, by = "LIBID")
mtx_stats_chosen$MICROBE_COUNT_MINUS_CONTAM <- mtx_stats_chosen$MICROBE_COUNT - mtx_stats_chosen$estimated_contaminant_read_pairs
#THESE ARE UNALIGNED READS AT EACH STAGE
pilot_cohort_humann3 <- read_tsv("../metadata/pilot_cohort_humann3.tsv", show_col_types = FALSE)
pilot_cohort_humann3 <- pilot_cohort_humann3 %>% dplyr::rename(humann3_unaligned_aft_nuc_search=aft_nuc_search,
humann3_unaligned_aft_transl_search=aft_transl_search)
pilot_cohort_humann3$humann3_aligned_aft_nuc_search <- 100 - pilot_cohort_humann3$humann3_unaligned_aft_nuc_search
pilot_cohort_humann3$humann3_aligned_aft_transl_search <- 100 - pilot_cohort_humann3$humann3_unaligned_aft_transl_search
pilot_cohort_humann3$annotation_method <- "HUMAnN3 default"
pilot_cohort_humann3$MICROBIAL_PERCENT_ANNOTATED <- pilot_cohort_humann3$humann3_aligned_aft_transl_search
#annotation stats from our in house mtx pipeline
mtx_proportion_microbial_annotated <- read_tsv("../metadata/mtx_proportion_microbial_annotated.tsv",
show_col_types = FALSE)
#for direct comparison with humann3 for the pilot cohort
pilot_cohort_microbial_annotated <- mtx_proportion_microbial_annotated %>% dplyr::filter(LIBID %in% pilot_cohort_humann3$LIBID)
pilot_cohort_microbial_annotated$MICROBIAL_PERCENT_ANNOTATED <- pilot_cohort_microbial_annotated$MICROBE_COUNT_PROPORTION_ANNOTATED * 100
pilot_cohort_microbial_annotated$annotation_method <- "Custom workflow (this paper)"
pilot_cohort_mtx_vs_humann3 <- rbind(pilot_cohort_microbial_annotated %>%
dplyr::select(LIBID, MICROBIAL_PERCENT_ANNOTATED, annotation_method),
pilot_cohort_humann3 %>% dplyr::select(LIBID, MICROBIAL_PERCENT_ANNOTATED, annotation_method))
ggplot(pilot_cohort_mtx_vs_humann3,
aes(x=annotation_method, y=MICROBIAL_PERCENT_ANNOTATED)) +
geom_boxplot() + theme_classic() + stat_compare_means(paired = TRUE,method = "wilcox.test") +ylab("% of reads functionally annotated")
pilot_cohort_mtx_vs_humann3_boxplot <- ggpaired(pilot_cohort_mtx_vs_humann3, x = "annotation_method", y = "MICROBIAL_PERCENT_ANNOTATED",
line.color = "gray", line.size = 0.4,
palette = "jco")+ ylab("% of reads functionally annotated") +
stat_compare_means(paired = TRUE, method="wilcox.test")
ggsave(plot=pilot_cohort_mtx_vs_humann3_boxplot ,
filename = "../plots/pilot_cohort_mtx_vs_humann3_boxplot.pdf", width =7, height=5 )
pilot_cohort_mtx_vs_humann3_boxplot
main_cohort_QC <- merge(main_cohort_QC, metadata %>% dplyr::select(LIBID, subj_region, region))
main_cohort_QC$DV200 <- as.numeric(main_cohort_QC$DV200)
#median(main_cohort_QC$DV200, na.rm = TRUE) 76.93
main_cohort_QC$region <- factor(main_cohort_QC$region, levels=c("Sc","Ch","Ac","Vf","Tw"))
main_cohort_dv200_boxplot <- ggplot(main_cohort_QC %>% dplyr::filter(!is.na(DV200)), aes(y= DV200, x = (region))) +
geom_boxplot() +
theme_classic() + ggtitle("Full cohort, RNA")
ggsave(plot=main_cohort_dv200_boxplot, filename = "../plots/main_cohort_dv200_boxplot.pdf", width =7, height=5)
main_cohort_dv200_boxplot
mgx_stats_for_plot <- rbind(data.frame(read_pairs=mgx_stats_chosen$AFTER_FASTP, region=mgx_stats_chosen$region, cat="before_rm"),
data.frame(read_pairs=mgx_stats_chosen$MICROBE_COUNT, region=mgx_stats_chosen$region,
cat="after_rm"))
mgx_stats_for_plot_fmt <- rbind(mgx_stats_for_plot,
data.frame(read_pairs=mgx_stats_chosen$MICROBE_COUNT_MINUS_CONTAM,
region=mgx_stats_chosen$region,
cat="after_rm_minus_contam"))
mgx_read_stats_boxplot <- ggplot(mgx_stats_for_plot_fmt %>% mutate(region= fct_relevel(region, "Sc", "Ch", "Ac", "Vf", "Tw"),
cat=fct_relevel(cat, "before_rm", "after_rm")) %>%
mutate(cat = recode(cat, "before_rm" = "All reads",
"after_rm" = "microbial reads",
"after_rm_minus_contam"= "skin microbial reads")),
aes(x=region, y=read_pairs, fill=cat)) + theme_classic() + geom_boxplot() + ggtitle("Metagenomes (n = 102)")
ggsave(plot=mgx_read_stats_boxplot, filename = "../plots/mgx_read_stats_boxplot.pdf")
#What percent of sequences were identified as contamimant microbes (estimated)?
mgx_stats_chosen$est_percent_microbial_contam <- (mgx_stats_chosen$estimated_contaminant_read_pairs / mgx_stats_chosen$MICROBE_COUNT)*100
median(mgx_stats_chosen$est_percent_microbial_contam) #8.29%
max(mgx_stats_chosen$est_percent_microbial_contam) #71.9%
min(mgx_stats_chosen$est_percent_microbial_contam) #0.09%
#Paired metagenomes were sequenced to sufficient depth to obtain a median of > 5.5 million microbial read pairs after filtering for human reads and contaminants
median(mgx_stats_chosen$MICROBE_COUNT_MINUS_CONTAM)
mgx_read_stats_boxplot
View(mtx_stats_chosen)
#What percent of sequences were identified as contamimant microbes (estimated)?
mtx_stats_chosen$est_percent_microbial_contam <- (mtx_stats_chosen$estimated_contaminant_read_pairs / mtx_stats_chosen$MICROBE_COUNT)*100
median(mtx_stats_chosen$est_percent_microbial_contam) #8.29%
max(mtx_stats_chosen$est_percent_microbial_contam) #71.9%
min(mtx_stats_chosen$est_percent_microbial_contam) #0.09%
