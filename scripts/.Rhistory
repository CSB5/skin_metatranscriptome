species="Malassezia_restricta")
plotDispEsts(M_restricta_Sc_Ch_filt_DESeq[["dds"]])
DESeq2::plotMA(M_restricta_Sc_Ch_filt_DESeq[["DE_results_shrunken"]])
summary(M_restricta_Sc_Ch_filt_DESeq[["DE_results_shrunken"]])
M_restricta_Sc_Ch_DE_res <- M_restricta_Sc_Ch_filt_DESeq[["DE_results_shrunken_df"]] %>% dplyr::rename(feature=gene)
#points that correspond to "peroxisome" pathway - map04146
M_res_term2gene_peroxisome <- M_res_term2gene %>% dplyr::filter(from == "map04146")
M_res_term2gene_enriched_lipid_metab <- M_res_term2gene %>%
dplyr::filter(from %in%  c("map00561","map00564","map00600"))
M_res_Sc_Ch_volcano_keyvals_color <- ifelse(M_restricta_Sc_Ch_DE_res$feature %in%
intersect(M_res_term2gene_peroxisome$to,M_res_term2gene_enriched_lipid_metab$to), 'green',
ifelse(M_restricta_Sc_Ch_DE_res$feature %in% M_res_term2gene_peroxisome$to,'royalblue',
ifelse(M_restricta_Sc_Ch_DE_res$feature %in% M_res_term2gene_enriched_lipid_metab$to, "gold",
'black')))
M_res_Sc_Ch_volcano_keyvals_color[is.na(M_res_Sc_Ch_volcano_keyvals_color)] <- 'black'
names(M_res_Sc_Ch_volcano_keyvals_color)[M_res_Sc_Ch_volcano_keyvals_color == 'royalblue'] <- 'Peroxisome'
names(M_res_Sc_Ch_volcano_keyvals_color)[M_res_Sc_Ch_volcano_keyvals_color == 'gold'] <- 'Ether lipid/Glycerophospholipid/Sphingolipid metabolism'
names(M_res_Sc_Ch_volcano_keyvals_color)[M_res_Sc_Ch_volcano_keyvals_color == 'green'] <- 'Both'
M_restricta_volcano_gene_labels <- data.frame(gene=rownames(M_restricta_Sc_Ch_DE_res))
M_restricta_volcano_gene_labels <- merge(M_restricta_volcano_gene_labels, M_res_gtf_annots, all.x=TRUE, by ="gene")
###########
##M restricta
##########
#Malassezia restricta has good annotations from the gtf file
M_res_gtf_annots <- read_tsv("../metadata/M_restricta_GCA_003691605.1_ASM369160v1_cds_from_genomic_annots.tsv",
col_names = c("gene_tag","gene","proteinID"), show_col_types = FALSE)
M_res_gtf_annots$annot <- ifelse(is.na(M_res_gtf_annots$gene_tag) & is.na(M_res_gtf_annots$proteinID),
M_res_gtf_annots$gene, ifelse(is.na(M_res_gtf_annots$gene_tag)
& !is.na(M_res_gtf_annots$proteinID),
M_res_gtf_annots$proteinID, M_res_gtf_annots$gene_tag)
)
M_res_gtf_annots$annot <- paste0(M_res_gtf_annots$gene,"_",M_res_gtf_annots$annot)
#Shorten very long label
M_res_gtf_annots$annot <- gsub(pattern="putative CDP-alcohol phosphatidyltransferase class-I family protein C22A12.10",
replacement="CDP-alcohol phosphatidyltransferase",
M_res_gtf_annots$annot)
M_restricta_volcano_gene_labels <- data.frame(gene=rownames(M_restricta_Sc_Ch_DE_res))
M_restricta_volcano_gene_labels <- merge(M_restricta_volcano_gene_labels, M_res_gtf_annots, all.x=TRUE, by ="gene")
M_restricta_volcano_gene_labels$gene_annot <- ifelse(is.na(M_restricta_volcano_gene_labels$gene_tag),
M_restricta_volcano_gene_labels$gene,
M_restricta_volcano_gene_labels$gene_tag)
EnhancedVolcano(M_restricta_Sc_Ch_DE_res,
lab = M_restricta_volcano_gene_labels$gene_annot,
title = "Commonly expressed Malassezia restricta transcripts, Sc vs Ch",
x='log2FoldChange',
y='padj',
selectLab = c('plcN_1', 'plcN_2',
'plcN_3', 'plcN_4',
'plcN_5','plcN_6',
'plcN_7', 'stt4', 'pik1',
'Acot8','POT1', 'LACS7', 'POX2', 'PEX11B'),
#boxedLabels = TRUE,
drawConnectors = TRUE,
labFace = 'bold',
labSize = 3.0,
pCutoff = 0.05,
FCcutoff=0,
colCustom = M_res_Sc_Ch_volcano_keyvals_color)
M_restricta_Sc_Ch_DE_volcano <- EnhancedVolcano(M_restricta_Sc_Ch_DE_res,
lab = M_restricta_volcano_gene_labels$gene_annot,
title = "Commonly expressed Malassezia restricta transcripts, Sc vs Ch",
x='log2FoldChange',
y='padj',
selectLab = c('plcN_1', 'plcN_2',
'plcN_3', 'plcN_4',
'plcN_5','plcN_6',
'plcN_7', 'stt4', 'pik1',
'Acot8','POT1', 'LACS7', 'POX2', 'PEX11B'),
#boxedLabels = TRUE,
drawConnectors = TRUE,
labFace = 'bold',
labSize = 3.0,
pCutoff = 0.05,
FCcutoff=0,
colCustom = M_res_Sc_Ch_volcano_keyvals_color)
ggsave(filename="../plots/M_restricta_Sc_Ch_DE_volcano.pdf",
plot=M_restricta_Sc_Ch_DE_volcano,
height = 8, width = 10)
M_restricta_Sc_Ch_DE_volcano
M_restricta_Sc_Ch_DE_volcano <- EnhancedVolcano(M_restricta_Sc_Ch_DE_res,
lab = M_restricta_volcano_gene_labels$gene_annot,
title = "Malassezia restricta transcripts, Sc vs Ch",
x='log2FoldChange',
y='padj',
selectLab = c('plcN_1', 'plcN_2',
'plcN_3', 'plcN_4',
'plcN_5','plcN_6',
'plcN_7', 'stt4', 'pik1',
'Acot8','POT1', 'LACS7', 'POX2', 'PEX11B'),
#boxedLabels = TRUE,
drawConnectors = TRUE,
labFace = 'bold',
labSize = 3.0,
pCutoff = 0.05,
FCcutoff=0,
colCustom = M_res_Sc_Ch_volcano_keyvals_color)
ggsave(filename="../plots/M_restricta_Sc_Ch_DE_volcano.pdf",
plot=M_restricta_Sc_Ch_DE_volcano,
height = 8, width = 10)
M_restricta_Sc_Ch_DE_volcano
#Load in term2name so that we do not have to download_KEGG every time we re-run this chunk
KEGG_term2name <- read_tsv("../metadata/KEGG_term2name.tsv", show_col_types = FALSE)
M_restricta_Sc_Ch_DE_GSEA_KEGG <- GSEA_from_DESeq(genelist = M_restricta_Sc_Ch_filt_DESeq$DE_results_shrunken_df$log2FoldChange,
gene_names = M_restricta_Sc_Ch_filt_DESeq$DE_results_shrunken_df$gene,
term2gene = M_res_term2gene,
term2name = KEGG_term2name)
make_NES_barplot(M_restricta_Sc_Ch_DE_GSEA_KEGG@result, title= "Malassezia restricta transcripts, Sc vs Ch")
M_restricta_Sc_Ch_DE_NES_KEGG <- make_NES_barplot(M_restricta_Sc_Ch_DE_GSEA_KEGG@result, title= "Malassezia restricta transcripts, Sc vs Ch")
ggsave(filename="../plots/DESeq_taxa/M_restricta_Sc_Ch_DE_NES_KEGG.pdf",
plot=M_restricta_Sc_Ch_DE_NES_KEGG,
height = 8, width = 10)
ggsave(filename="../plots/M_restricta_Sc_Ch_DE_NES_KEGG.pdf",
plot=M_restricta_Sc_Ch_DE_NES_KEGG,
height = 8, width = 10)
M_restricta_Sc_Ch_DE_NES_KEGG
tally_signif_DE <- function(input_df){
#upregulated
upreg_df <- input_df %>% dplyr::filter(log2FoldChange > 0 & padj < 0.05)
upreg_tally <- length(unique(upreg_df$pangene))
#Downregulated
downreg_df <- input_df %>% dplyr::filter(log2FoldChange < 0 & padj < 0.05)
downreg_tally <- length(unique(downreg_df$pangene))
output <- data.frame(comparison=unique(input_df$comparison),
num_upreg_features=upreg_tally,
num_downreg_features=downreg_tally)
return(output)
}
M_globosa_Sc_Ch_count_matrix <- Malassezia_count_matrix[grep("MGL",row.names(Malassezia_count_matrix)),
mtx_Sc_Ch_libs]
M_globosa_Sc_Ch <- lapply(rna_k2_minimizer[mtx_Sc_Ch_libs], function(df){
output <- df %>% dplyr::filter(k2_taxon == "Malassezia_globosa") %>% dplyr::rename(LIBID=mtx_LIBID)
output <- merge(output, mtx_stats_chosen %>% dplyr::select(c("LIBID","subj_region", "subject","region","low_conc")),
by="LIBID")
return(output)
}) %>% do.call("rbind",.)
M_globosa_Sc_Ch_PCA_input <- run_DESeq_with_salmon_matrix(input_matrix = M_globosa_Sc_Ch_count_matrix,
lib_vec=M_globosa_Sc_Ch %>% dplyr::filter(paired_counts >= 200000) %>% pull(LIBID),
cond="Sc",
ref_cond="Ch",
run_test = FALSE,
species="Malassezia_globosa")
plotPCA(M_globosa_Sc_Ch_PCA_input[["vsd"]], intgroup = "region", returnData=FALSE) + geom_text_repel(aes(label = name))
M_globosa_Sc_Ch_filt_DESeq <- run_DESeq_with_salmon_matrix(input_matrix = M_globosa_Sc_Ch_count_matrix,
lib_vec=M_globosa_Sc_Ch %>%
dplyr::filter(paired_counts >= 200000) %>%  pull(LIBID),
cond="Sc",
ref_cond="Ch",
run_test = TRUE,
species="Malassezia_globosa")
plotDispEsts(M_globosa_Sc_Ch_filt_DESeq[["dds"]])
DESeq2::plotMA(M_globosa_Sc_Ch_filt_DESeq[["DE_results_shrunken"]])
summary(M_globosa_Sc_Ch_filt_DESeq[["DE_results_shrunken"]])
M_globosa_Sc_Ch_DE_res <- M_globosa_Sc_Ch_filt_DESeq[["DE_results_shrunken_df"]] %>% dplyr::rename(feature=gene)
#Add annotations to DESeq2 results
M_globosa_Sc_Ch_DE_res_annot <- merge(M_globosa_Sc_Ch_DE_res,
MGL_OG_annot %>% dplyr::select(gene,Description) %>%
dplyr::rename(feature=gene),
by = "feature")
C_acnes_mtx_bt2_pangenome_counts <- lapply(mtx_bt2_pangenome_counts, function(x){
output <-  calculate_species_TPM(x, species="Cutibacterium_acnes")
return(output)
}) %>% do.call("rbind",.)
source("custom_functions.R")
mtx_bt2_pangenome_counts <- lapply(mtx_to_pull, function(x){
df <- read_tsv(file=paste0("../data/mtx_species_mapping/bt2_out/RNA/",x,"_bt2_microbe_pangenome_aligned_filtered_cov.tsv"),
show_col_types = FALSE)
df$LIBID <- x
return(df)
})
C_acnes_mtx_bt2_pangenome_counts <- lapply(mtx_bt2_pangenome_counts, function(x){
output <-  calculate_species_TPM(x, species="Cutibacterium_acnes")
return(output)
}) %>% do.call("rbind",.)
C_acnes_mtx_bt2_pangenome_counts <- merge(C_acnes_mtx_bt2_pangenome_counts, mtx_stats_chosen %>% dplyr::select(LIBID,region), by ="LIBID")
C_acnes_mtx_bt2_pangenome_counts_aggregate <- C_acnes_mtx_bt2_pangenome_counts %>%
group_by(LIBID,region) %>% summarise(total_read_count_in_sample=sum(unpaired_read_count_sum))
C_acnes_mtx_bt2_pangenome_counts_aggregate$region <- factor(C_acnes_mtx_bt2_pangenome_counts_aggregate$region,
levels=c("Sc","Ch","Vf","Ac","Tw"))
ggplot(C_acnes_mtx_bt2_pangenome_counts_aggregate %>% dplyr::filter(region %in% c("Sc","Ch")),
aes(x=region,y=log10(total_read_count_in_sample))) + geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x=element_blank()) +
ggtitle("Expressed C. acnes features")
#Read counts for the propan clusters that are expressed by a majority of individuals with C acnes for Sc and Ch
C_acnes_mtx_cluster_counts <- C_acnes_mtx_bt2_pangenome_counts %>%
dplyr::select(LIBID, propan_clusterID, unpaired_read_count_sum)
#convert to input list
C_acnes_mtx_cluster_counts_list <- split(C_acnes_mtx_cluster_counts,
f=C_acnes_mtx_cluster_counts$LIBID)
C_acnes_Sc_Ch_DE_QC <- QC_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
C_acnes_Sc_Ch_DE_QC <- QC_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
source("custom_functions.R")
C_acnes_Sc_Ch_DE_QC <- QC_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
source("custom_functions.R")
source("DESeq2_wrappers.R")
C_acnes_Sc_Ch_DE_QC <- QC_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
C_acnes_Sc_Ch_DE_QC[["PCA_plot"]]
#
C_acnes_Sc_Ch_DE_analysis <- compare_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species_anno=C_acnes_anno,
species_pangene_names = C_acnes_pangene_names,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
plotDispEsts(C_acnes_Sc_Ch_DE_analysis[["species_site_filt_DESeq"]]$dds)
C_acnes_anno <- read_csv("../metadata/1747.Cutibacterium.acnes.pangenome.annotation.matrix.csv",
show_col_types = FALSE) %>% dplyr::rename(propan_clusterID=Clusters)
C_acnes_pangene_names <- read_tsv("../metadata/C_acnes_derep_pangenome_names.txt",
col_names = "pangene",
show_col_types = FALSE) #9922
# Minimum 200K C acnes reads
C_acnes_Sc_Ch_DE_analysis <- compare_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species_anno=C_acnes_anno,
species_pangene_names = C_acnes_pangene_names,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
source("DESeq2_wrappers.R")
# Minimum 200K C acnes reads
C_acnes_Sc_Ch_DE_analysis <- compare_bacteria_RNA_sites(list_of_counts = C_acnes_mtx_cluster_counts_list,
species_anno=C_acnes_anno,
species_pangene_names = C_acnes_pangene_names,
species="Cutibacterium_acnes",
site="Sc", ref_site="Ch",
count_threshold = 200000,
shared_individuals_bet_sites=TRUE)
plotDispEsts(C_acnes_Sc_Ch_DE_analysis[["species_site_filt_DESeq"]]$dds)
DESeq2::plotMA(C_acnes_Sc_Ch_DE_analysis[["species_site_filt_DESeq"]]$DE_results_shrunken)
summary(C_acnes_Sc_Ch_DE_analysis[["species_site_filt_DESeq"]]$DE_results_shrunken)
#check the DE results
C_acnes_Sc_Ch_DE_results_shrunken <- C_acnes_Sc_Ch_DE_analysis[["species_site_filt_DESeq"]]$DE_results_shrunken_df
C_acnes_Sc_Ch_DE_results_shrunken <- merge(C_acnes_Sc_Ch_DE_results_shrunken, C_acnes_anno, by = "propan_clusterID")
C_acnes_Sc_Ch_DE_results_shrunken_signif <- C_acnes_Sc_Ch_DE_results_shrunken %>% dplyr::filter(padj < 0.05)
microbial_Sc_vs_Ch_DE_list <- list(M_restricta_Sc_Ch_DE_res %>%
dplyr::rename(pangene=feature) %>%
dplyr::mutate(comparison="M_restricta"),
M_globosa_Sc_Ch_DE_res %>%
dplyr::rename(pangene=feature) %>%
dplyr::mutate(comparison="M_globosa"),
C_acnes_Sc_Ch_DE_results_shrunken %>%
dplyr::rename(pangene=propan_clusterID) %>%
dplyr::mutate(comparison="C_acnes"))
microbial_Sc_vs_Ch_DE_tally <- lapply(microbial_Sc_vs_Ch_DE_list, function(x){
output <- tally_signif_DE(x)
return(output)
}) %>% do.call("rbind",.)
microbial_Sc_vs_Ch_DE_tally_fmt <- pivot_longer(data=microbial_Sc_vs_Ch_DE_tally,
!comparison,
names_to="direction",
values_to="num_signif_features")
microbial_Sc_vs_Ch_DE_tally_fmt$direction <- gsub(microbial_Sc_vs_Ch_DE_tally_fmt$direction, pattern="num_",
replacement="")
microbial_Sc_vs_Ch_DE_tally_fmt$direction <- factor(microbial_Sc_vs_Ch_DE_tally_fmt$direction,
levels=c("upreg_features", "downreg_features"))
microbial_Sc_vs_Ch_DE_tally_barplot <- ggplot(microbial_Sc_vs_Ch_DE_tally_fmt, aes(x=comparison, y=num_signif_features, fill=direction)) +
geom_col(position="dodge") + theme_classic()
microbial_Sc_vs_Ch_DE_tally_barplot
ggsave(plot=microbial_Sc_vs_Ch_DE_tally_barplot,
filename = "../plots/microbial_Sc_vs_Ch_DE_tally_barplot.pdf")
#This is term2gene for KEGG pathways e.g. map03010
S_epi_KEGG_term2gene <- make_custom_term2gene_df(input_annot=S_epidermidis_anno,
pangene_names = S_epidermidis_pangene_names)
#make term2gene for GO terms (MF and BP)
S_epi_GO_term2gene <- make_custom_term2gene_df(input_annot = eight_skin_bact_proteins_emapper_annot %>%
dplyr::filter(species=="Staphylococcus_epidermidis"), annotation_used = "GO")
invivo_RNA_k2 <- lapply(mtx_to_pull, function(x){
read_tsv(paste0("../data/kraken2/RNA/",x,"_merged_k2.s.tsv"),
col_names = c("rel_abun", "paired_reads", "name"),
show_col_types = FALSE)
})
names(invivo_RNA_k2) <- mtx_to_pull
invivo_RNA_k2 <- lapply(mtx_to_pull, function(x){
invivo_RNA_k2[[x]]$LIBID <- x
return(invivo_RNA_k2[[x]])
})
invivo_RNA_k2_df <- do.call("rbind", invivo_RNA_k2)
names(invivo_RNA_k2) <- mtx_to_pull
S_epi_in_vivo_meta <- species_threshold_fn(species="Staphylococcus epidermidis",
paired_read_threshold = 200000,
k2_input=invivo_RNA_k2_df)
S_epi_in_vivo_meta <- merge(S_epi_in_vivo_meta %>% dplyr::rename(mtx_LIBID=LIBID), mtx_mgx_stats_chosen, by = "mtx_LIBID")
#S_epi_in_vivo_meta <- S_epi_in_vivo_meta %>% dplyr::filter(region=="Ch"|region=="Tw")
#to increase number of samples, group sebaceous sites together (Ch and Sc) for S epidermidis
S_epi_in_vivo_meta$region_fmt <- ifelse(S_epi_in_vivo_meta$region == "Tw", "Tw", "Sebaceous" )
#For C acnes
C_acnes_in_vivo_meta <- species_threshold_fn(species="Cutibacterium acnes", paired_read_threshold = 200000, k2_input=invivo_RNA_k2_df)
C_acnes_in_vivo_meta <- merge(C_acnes_in_vivo_meta %>% dplyr::rename(mtx_LIBID=LIBID), mtx_mgx_stats_chosen, by = "mtx_LIBID")
temp_meta <- S_epi_in_vitro_metadata %>% dplyr::select(Library_ID, expt_desc, study) %>%
unique %>%
dplyr::rename(condition=expt_desc) %>% as.data.frame()
temp_meta$expt_class <- "in_vitro"
temp_meta2 <- S_epi_in_vivo_meta %>% dplyr::select(mtx_LIBID, region_fmt) %>% dplyr::rename(condition=region_fmt)
temp_meta2$expt_class <- "in_vivo"
temp_meta2$study <- "this_study"
in_vitro_LIBID <- temp_meta %>% pull(Library_ID)
#Create row names with the associated sample names
rownames(temp_meta) <- temp_meta$Library_ID
rownames(temp_meta2) <- temp_meta2$mtx_LIBID
DESeq_metadata <- rbind(temp_meta %>% dplyr::select(-Library_ID), temp_meta2 %>% dplyr::select(-mtx_LIBID))
#batch information within the "study" variable
DESeq_metadata$study <- factor(DESeq_metadata$study)
#DESeq_metadata$batch <- ifelse(str_detect(rownames(DESeq_metadata),pattern="Sepi|MHS"),
#"this_study","other_studies")
#DESeq_metadata$batch <- factor(DESeq_metadata$batch)
invivo_mtx_counts <- lapply(S_epi_in_vivo_meta$mtx_LIBID, function(x){
df <- read_tsv(file=paste0("../data/mtx_species_mapping/bt2_out/RNA/",x,"_bt2_microbe_pangenome_aligned_filtered_cov.tsv"),
show_col_types = FALSE)
df$LIBID <- x
df$condition <- DESeq_metadata[x, "condition"]
#select only S epidermidis gene features
df_filt <- df %>% dplyr::filter(str_detect(df$pangene, pattern = "Staphylococcus_epidermidis"))
#sum up read counts within the propan clusters
##clusters fit the propan definitions
df_filt$propan_clusterID <- str_match(string=df_filt$pangene, pattern="cluster_[0-9]*")[,1]
df_filt_clust <- df_filt %>% group_by(propan_clusterID) %>%
mutate(unpaired_read_count_sum=sum(unpaired_read_count)) %>% ungroup()
output <- df_filt_clust %>% dplyr::select(c("propan_clusterID","unpaired_read_count_sum", "LIBID")) %>% unique(.)
output <- output %>% dplyr::rename(pangene=propan_clusterID,unpaired_read_count=unpaired_read_count_sum)
return(output)
})
invitro_mtx_counts <- lapply(in_vitro_LIBID, function(x){
df <- read_tsv(file=paste0("../data/mtx_species_mapping/S_epi_RNAseq_align_out/bt2_out/",x,"_bt2_microbe_pangenome_aligned_filtered_cov.tsv"),
show_col_types = FALSE)
df$LIBID <- x
df$condition <- DESeq_metadata[x, "condition"]
#select only S epidermidis gene features
df_filt <- df %>% dplyr::filter(str_detect(df$pangene, pattern = "Staphylococcus_epidermidis"))
#sum up read counts within the propan clusters
##clusters fit the propan definitions
df_filt$propan_clusterID <- str_match(string=df_filt$pangene, pattern="cluster_[0-9]*")[,1]
df_filt_clust <- df_filt %>% group_by(propan_clusterID) %>%
mutate(unpaired_read_count_sum=sum(unpaired_read_count)) %>% ungroup()
output <- df_filt_clust %>% dplyr::select(c("propan_clusterID","unpaired_read_count_sum", "LIBID")) %>% unique(.)
output <- output %>% dplyr::rename(pangene=propan_clusterID,unpaired_read_count=unpaired_read_count_sum)
return(output)
})
all_S_epi_mtx_counts <- c(invivo_mtx_counts, invitro_mtx_counts)
#https://stackoverflow.com/questions/72040033/name-lists-elements-based-on-column-they-are-containing
names(all_S_epi_mtx_counts) <- sapply(all_S_epi_mtx_counts, function(x) unique(x$LIBID))
#compare with in house data and three external studies: Avican et al 2021, Ahle et al 2022 and Wang et al 2017
Tw_vs_all_stat_phase <- run_DESeq_with_inputs_species_specific(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vitro_condition="stationary_phase_liquid",
in_vitro_study = c("this_study",
"Avican_et_al_2021",
"Wang_et_al_2017")),
run_test = TRUE, batch_correct = TRUE)
#PCA should be visualized after limma::removebatcheffect instead. See previous code chunk,
#plotPCA(Tw_vs_all_stat_phase[["vsd"]], intgroup = "condition", returnData=FALSE)
plotDispEsts(Tw_vs_all_stat_phase[["dds"]])
DESeq2::plotMA(Tw_vs_all_stat_phase[["DE_results_shrunken"]])
boxplot(Tw_vs_all_stat_phase$vsd_mat,
xlab="",
ylab="VST counts")
summary(Tw_vs_all_stat_phase[["DE_results_shrunken"]])
#save results
Tw_vs_all_stat_phase_DE_res <- Tw_vs_all_stat_phase[["DE_results_shrunken_df"]]
Tw_vs_all_stat_phase_DE_res <- merge(Tw_vs_all_stat_phase_DE_res,
S_epidermidis_anno %>% dplyr::rename(pangene=propan_clusterID))
write_tsv(Tw_vs_all_stat_phase_DE_res,"../data/DESeq2_out/S_epidermidis/S_epi_Tw_vs_all_stat_phase_DE_res.tsv")
#OS: osmotic stress
Tw_vs_all_OS <- run_DESeq_with_inputs(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vitro_condition="osmotic_stress_liquid", in_vitro_study = c("this_study", "Avican_et_al_2021", "Wang_et_al_2017")), batch_correct=TRUE, run_test = TRUE)
#OS: osmotic stress
Tw_vs_all_OS <- run_DESeq_with_inputs_species_specific(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vitro_condition="osmotic_stress_liquid", in_vitro_study = c("this_study", "Avican_et_al_2021", "Wang_et_al_2017")),
batch_correct=TRUE,
run_test = TRUE)
plotDispEsts(Tw_vs_all_OS[["dds"]])
DESeq2::plotMA(Tw_vs_all_OS[["DE_results_shrunken"]])
summary(Tw_vs_all_OS[["DE_results_shrunken"]])
Tw_vs_all_OS_DE_res <- Tw_vs_all_OS$DE_results_shrunken_df
Tw_vs_all_OS_DE_res <- merge(Tw_vs_all_OS_DE_res,
S_epidermidis_anno %>% dplyr::rename(pangene=propan_clusterID))
write_tsv(Tw_vs_all_OS_DE_res,"../data/DESeq2_out/S_epidermidis/S_epi_Tw_vs_all_OS_DE_res.tsv")
Tw_vs_all_log_phase <- run_DESeq_with_inputs_species_specific(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vitro_condition="log_phase_liquid",
in_vitro_study = c("this_study",
"Avican_et_al_2021",
"Wang_et_al_2017")),
run_test = TRUE, batch_correct = TRUE)
#plotPCA(Tw_vs_all_log_phase[["vsd"]], intgroup = "condition", returnData=FALSE)
plotDispEsts(Tw_vs_all_log_phase[["dds"]])
DESeq2::plotMA(Tw_vs_all_log_phase[["DE_results_shrunken"]])
summary(Tw_vs_all_log_phase[["DE_results_shrunken"]])
Tw_vs_all_log_phase_DE_res <- Tw_vs_all_log_phase$DE_results_shrunken_df
Tw_vs_all_log_phase_DE_res <- merge(Tw_vs_all_log_phase_DE_res,
S_epidermidis_anno %>% dplyr::rename(pangene=propan_clusterID))
write_tsv(Tw_vs_all_log_phase_DE_res,"../data/DESeq2_out/S_epidermidis/S_epi_Tw_vs_all_log_phase_DE_res.tsv")
#all studies
Seb_vs_all_OS <- run_DESeq_with_inputs(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vivo_site = "Sebaceous",                                                        in_vitro_condition="osmotic_stress_liquid",
in_vitro_study = c("this_study",
"Avican_et_al_2021",
"Wang_et_al_2017")),
run_test = TRUE,
batch_correct = TRUE)
#all studies
Seb_vs_all_OS <- run_DESeq_with_inputs_species_specific(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vivo_site = "Sebaceous",                                                        in_vitro_condition="osmotic_stress_liquid",
in_vitro_study = c("this_study",
"Avican_et_al_2021",
"Wang_et_al_2017")),
run_test = TRUE,
batch_correct = TRUE)
#plotPCA(Seb_vs_all_OS[["vsd"]], intgroup = "condition", returnData=FALSE)
Seb_vs_all_OS_DE_res <- Seb_vs_all_OS$DE_results_shrunken_df
Seb_vs_all_OS_DE_res <- merge(Seb_vs_all_OS_DE_res,
S_epidermidis_anno %>% dplyr::rename(pangene=propan_clusterID))
write_tsv(Seb_vs_all_OS_DE_res,"../data/DESeq2_out/S_epi_Seb_vs_all_OS_DE_res.tsv")
Seb_vs_all_log_phase <- run_DESeq_with_inputs_species_specific(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vivo_site = "Sebaceous",                                                        in_vitro_condition="log_phase_liquid",
in_vitro_study = c("this_study",
"Avican_et_al_2021",
"Wang_et_al_2017")),
run_test = TRUE,
batch_correct = TRUE)
#plotPCA(Seb_vs_all_log_phase[["vsd"]], intgroup = "condition", returnData=FALSE)
Seb_vs_all_log_phase_DE_res <- Seb_vs_all_log_phase$DE_results_shrunken_df
Seb_vs_all_log_phase_DE_res <- merge(Seb_vs_all_log_phase_DE_res,
S_epidermidis_anno %>% dplyr::rename(pangene=propan_clusterID))
write_tsv(Seb_vs_all_log_phase_DE_res,"../data/DESeq_out/S_epi_Seb_vs_all_log_phase_DE_res.tsv")
write_tsv(Seb_vs_all_log_phase_DE_res,"../data/DESeq2_out/S_epi_Seb_vs_all_log_phase_DE_res.tsv")
Seb_vs_all_stat_phase <- run_DESeq_with_inputs_species_specific(input_list = all_S_epi_mtx_counts,
lib_vec = get_lib_vec_fn(in_vivo_site = "Sebaceous",
in_vitro_condition="stationary_phase_liquid",
in_vitro_study = c("this_study",
"Avican_et_al_2021",
"Wang_et_al_2017")),
run_test = TRUE, batch_correct = TRUE)
#plotPCA(Seb_vs_all_stat_phase[["vsd"]], intgroup = "condition", returnData=FALSE)
plotDispEsts(Seb_vs_all_stat_phase[["dds"]])
DESeq2::plotMA(Seb_vs_all_stat_phase[["DE_results_shrunken"]])
summary(Seb_vs_all_stat_phase[["DE_results_shrunken"]])
Seb_vs_all_stat_phase_DE_res <- Seb_vs_all_stat_phase[["DE_results_shrunken_df"]]
Seb_vs_all_stat_phase_DE_res <- merge(Seb_vs_all_stat_phase_DE_res,
S_epidermidis_anno %>% dplyr::rename(pangene=propan_clusterID))
write_tsv(Seb_vs_all_stat_phase_DE_res,"../data/DESeq2_out/S_epi_Seb_vs_all_stat_phase_DE_res.tsv")
S_epi_DE_list <- tibble::lst(Seb_vs_all_log_phase_DE_res,
Seb_vs_all_OS_DE_res,
Seb_vs_all_stat_phase_DE_res,
Tw_vs_all_log_phase_DE_res,
Tw_vs_all_OS_DE_res,
Tw_vs_all_stat_phase_DE_res)
S_epi_DE_tally <- lapply(S_epi_DE_list, function(x){
output <- tally_signif_DE(x)
return(output)
}) %>% do.call("rbind",.)
View(S_epi_DE_list)
microbial_Sc_vs_Ch_DE_tally <- lapply(microbial_Sc_vs_Ch_DE_list, function(x){
output <- tally_signif_DE(x)
return(output)
}) %>% do.call("rbind",.)
source("DESeq2_wrappers.R")
S_epi_DE_list <- tibble::lst(Seb_vs_all_log_phase_DE_res,
Seb_vs_all_OS_DE_res,
Seb_vs_all_stat_phase_DE_res,
Tw_vs_all_log_phase_DE_res,
Tw_vs_all_OS_DE_res,
Tw_vs_all_stat_phase_DE_res)
S_epi_DE_tally <- lapply(S_epi_DE_list, function(x){
output <- tally_signif_DE(x)
return(output)
}) %>% do.call("rbind",.)
test <- tally_signif_DE(Seb_vs_all_log_phase_DE_res)
View(Seb_vs_all_log_phase_DE_res)
Seb_vs_all_log_phase_DE_res$comparison <- "Seb_vs_log_phase"
Seb_vs_all_OS_DE_res$comparison <- "Seb_vs_OS"
Seb_vs_all_stat_phase_DE_res$comparison <- "Seb_vs_stat_phase"
Tw_vs_all_log_phase_DE_res$comparison <- "Tw_vs_log_phase"
Tw_vs_all_OS_DE_res$comparison <- "Tw_vs_OS"
Tw_vs_all_stat_phase_DE_res$comparison <- "Tw_vs_stat_phase"
S_epi_DE_list <- tibble::lst(Seb_vs_all_log_phase_DE_res,
Seb_vs_all_OS_DE_res,
Seb_vs_all_stat_phase_DE_res,
Tw_vs_all_log_phase_DE_res,
Tw_vs_all_OS_DE_res,
Tw_vs_all_stat_phase_DE_res)
S_epi_DE_tally <- lapply(S_epi_DE_list, function(x){
output <- tally_signif_DE(x)
return(output)
}) %>% do.call("rbind",.)
S_epi_DE_tally_fmt <- pivot_longer(data=S_epi_DE_tally,
!comparison,
names_to="direction",
values_to="num_signif_features")
S_epi_DE_tally_fmt$direction <- gsub(S_epi_DE_tally_fmt$direction, pattern="num_",
replacement="")
S_epi_DE_tally_fmt$direction <- factor(S_epi_DE_tally_fmt$direction,
levels=c("upreg_features", "downreg_features"))
S_epi_DE_tally_barplot <- ggplot(S_epi_DE_tally_fmt, aes(x=comparison, y=num_signif_features, fill=direction)) +
geom_col(position="dodge") + theme_classic()
S_epi_DE_tally_barplot
ggsave(plot=S_epi_DE_tally_barplot,
filename = "../plots/S_epi_DE_tally_barplot.pdf")
