View(mtx_mgx_non_human_percent)
#
# Interestingly, the proportion of non-human reads was found to be significantly higher in metatranscriptomes versus metagenomes (XX% vs YY%, Wilcoxon signed rank p-value <0.05; Supplementary Figure 1D), underscoring the feasibility of skin metatranscriptomic sequencing."
median(mtx_non_human_proportion$percent_non_human)
ggpaired(mtx_mgx_non_human_percent, x = "assay", y = "percent_non_human",
line.color = "gray", line.size = 0.4,
palette = "jco")+ ylab("% of reads not mapped to hg38") +
stat_compare_means(paired = TRUE, method="wilcox.test")
#
median(mgx_non_human_proportion$percent_non_human) #97.9
0.23*10^9
2.3e+08/300
766666.7
?rarecurve
library(vegan)
?rarecurve
knitr::opts_chunk$set(echo = TRUE)
library(limma)
?removeBatchEffect
2475618 + 406505
1305256 + 317278
devtools::install_github("FrederickHuangLin/ANCOMBC"
)
?ancombc
?ancombc2
?ANCOMBC
?ancombc::
setwd("../Desktop/local_project/manuscript/skin_metatranscriptome/scripts")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggbreak)
library(FSA)
library(ggpubr)
# Function to count white spaces in a single string
count_spaces <- function(text) {
space_count <- length(gregexpr(" ", text)[[1]])
if (space_count == 1 && gregexpr(" ", text)[[1]][1] == -1) {
return(0)  # Handle case where there are no spaces
}
return(space_count)
}
IL1B_HIBIT <- read_tsv("../data/wet_lab/pro_IL1B_HiBIT_RLU.txt", show_col_types = FALSE)
IL1B_ELISA <- read_tsv("../data/wet_lab/cleaved_IL1B_ELISA.txt", show_col_types = FALSE)
IL1B_HIBIT$temp <- sapply(IL1B_HIBIT$condition, count_spaces)
IL1B_HIBIT$grouping <- ifelse(IL1B_HIBIT$temp == 3, str_extract(string=IL1B_HIBIT$condition,pattern="S. [A-Za-z]*"),
IL1B_HIBIT$condition)
IL1B_ELISA$temp <- sapply(IL1B_ELISA$condition, count_spaces)
IL1B_ELISA$grouping <- ifelse(IL1B_ELISA$temp == 3, str_extract(string=IL1B_ELISA$condition,pattern="S. [A-Za-z]*"),
IL1B_ELISA$condition)
condition_to_grouping <- IL1B_HIBIT %>% dplyr::select(condition, grouping) %>% unique(.)
View(IL1B_ELISA)
View(IL1B_HIBIT)
# Filter away contaminated sample
IL1B_HIBIT <- IL1B_HIBIT %>% dplyr::filter(condition != "8-043 S. epi Ch")
IL1B_ELISA <- IL1B_ELISA %>% dplyr::filter(condition != "8-043 S. epi Ch")
#for each biological repeat, get the average fractional RLU of the technical replicates.
IL1B_HIBIT_avg <- IL1B_HIBIT %>% group_by(batch, condition) %>%
summarise(avg_over_tech_rep=mean(RLU)) %>% ungroup()
#barplot of HIBIT RLU distribution per species/experimental condition
IL1B_HIBIT_grouping_avg <- merge(IL1B_HIBIT_avg, condition_to_grouping, by = "condition")
IL1B_HIBIT_grouping_avg_to_plot <- IL1B_HIBIT_grouping_avg %>% dplyr::filter(!grouping %in% c("untreated","1uM ANS"))
#Perform Kruskal-Wallis and post hoc tests
kruskal.test(avg_over_tech_rep ~ grouping,data=IL1B_HIBIT_grouping_avg_to_plot)
IL1B_HIBIT_dunn_test <- dunnTest(avg_over_tech_rep ~ grouping,data=IL1B_HIBIT_grouping_avg_to_plot, method="bh")
#https://www.datanovia.com/en/blog/ggpubr-how-to-add-p-values-generated-elsewhere-to-a-ggplot/
#format the dunn test results to be compatible with ggpubr::stat_pvalue_manual()
IL1B_HIBIT_dunn_test_df <- IL1B_HIBIT_dunn_test$res
#only selected comparisons for plotting
IL1B_HIBIT_dunn_test_df_subset <- IL1B_HIBIT_dunn_test_df %>%
dplyr::filter(Comparison %in% c("S. cap - S. epi",
"S. cap - S. hom",
"S. cap - S. war",
"S. epi - S. hom",
"S. epi - S. war"))
IL1B_HIBIT_dunn_test_df_subset <- IL1B_HIBIT_dunn_test_df_subset %>%
separate_wider_delim(Comparison, " - ", names=c("group1","group2")) %>%
dplyr::rename("p"="P.unadj", "p.adj"="P.adj")
#three significant figures
IL1B_HIBIT_dunn_test_df_subset$p.adj_fmt <- formatC(IL1B_HIBIT_dunn_test_df_subset$p.adj, format = "e", digits = 2)
IL1B_HIBIT_plot <- ggplot(IL1B_HIBIT_grouping_avg_to_plot , aes(x=grouping, y=avg_over_tech_rep)) +
geom_boxplot() + theme_classic() +
ylab("pro-IL-1B Relative Light Units") +
theme(axis.title.x = element_blank()) +
stat_pvalue_manual(
IL1B_HIBIT_dunn_test_df_subset, label = "p.adj_fmt",
y.position = 2.3, step.increase = 0.1) + annotate("text", x=2.5, y = 4,
label ="Kruskal-Wallis chi-squared = 19.854, df = 5, p-value = 0.001331")
ggsave(plot=IL1B_HIBIT_plot, filename="../plots/IL1B_HIBIT_plot.pdf", height =7, width = 5)
IL1B_HIBIT_plot
#for each biological repeat, get the average fractional RLU of the technical replicates.
IL1B_ELISA_avg <- IL1B_ELISA %>% group_by(batch, condition) %>%
summarise(avg_over_tech_rep=mean(concentration)) %>% ungroup()
#barplot of IL1B concentrations per species/experimental condition
IL1B_ELISA_grouping_avg <- merge(IL1B_ELISA_avg, condition_to_grouping, by = "condition")
IL1B_ELISA_grouping_avg_to_plot <- IL1B_ELISA_grouping_avg %>% dplyr::filter(!grouping %in% c("untreated","1uM ANS"))
#Perform Kruskal-Wallis and post hoc tests
kruskal.test(avg_over_tech_rep ~ grouping,data=IL1B_ELISA_grouping_avg_to_plot)
#Kruskal-Wallis chi-squared = 33.864, df = 5, p-value = 2.534e-06
IL1B_ELISA_dunn_test <- dunnTest(avg_over_tech_rep ~ grouping,data=IL1B_ELISA_grouping_avg_to_plot, method="bh")
#https://www.datanovia.com/en/blog/ggpubr-how-to-add-p-values-generated-elsewhere-to-a-ggplot/
#format the dunn test results to be compatible with ggpubr::stat_pvalue_manual()
IL1B_ELISA_dunn_test_df <- IL1B_ELISA_dunn_test$res
#only selected comparisons for plotting
IL1B_ELISA_dunn_test_df_subset <- IL1B_ELISA_dunn_test_df %>%
dplyr::filter(Comparison %in% c("S. cap - S. epi",
"S. cap - S. hom",
"S. cap - S. war",
"S. epi - S. hom",
"S. epi - S. war"))
IL1B_ELISA_dunn_test_df_subset <- IL1B_ELISA_dunn_test_df_subset %>%
separate_wider_delim(Comparison, " - ", names=c("group1","group2")) %>%
dplyr::rename("p"="P.unadj", "p.adj"="P.adj")
#scientific notation
IL1B_ELISA_dunn_test_df_subset$p.adj_fmt <- formatC(IL1B_ELISA_dunn_test_df_subset$p.adj, format = "e", digits = 2)
IL1B_ELISA_plot <- ggplot(IL1B_ELISA_grouping_avg %>% dplyr::filter(!grouping %in% c("untreated","1uM ANS")), aes(x=grouping, y=avg_over_tech_rep)) + geom_boxplot() + theme_classic() +
ylab("cleaved IL-1B concentration") + theme(axis.title.x = element_blank()) +
stat_pvalue_manual(
IL1B_ELISA_dunn_test_df_subset, label = "p.adj_fmt",
y.position = 300, step.increase = 0.1) + annotate("text", x=2.5, y = 525,
label ="Kruskal-Wallis chi-squared = 33.864, df = 5, p-value = 2.534e-06")
ggsave(plot=IL1B_ELISA_plot, filename="../plots/IL1B_ELISA_plot.pdf", height =7, width = 5)
IL1B_ELISA_plot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(ggpubr)
library(DESeq2)
library("clusterProfiler") #v4.12.6
library("GSEABase") # v1.66.0
library(vegan)
library(EnhancedVolcano)
#functions
source("custom_functions.R")
source("DESeq2_wrappers.R")
source("clusterprofiler_wrappers.R")
metadata <- read_tsv("../metadata/skin_mtx_metadata_fmt.txt", show_col_types = FALSE)
mgx_stats <- read_tsv("../metadata/MGX_QC_stats.txt", show_col_types = FALSE)
mtx_stats <- read_tsv("../metadata/MTX_QC_stats.txt", show_col_types = FALSE)
mgx_stats <- merge(mgx_stats, metadata, by = "LIBID", all.x=TRUE)
mtx_stats <- merge(mtx_stats, metadata, by ="LIBID", all.x=TRUE)
#mtx_to_pull and mgx_to_pull refer to the 102 Libraries with paired MTX and MGX data:
mtx_to_pull <- read_tsv("../metadata/mtx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mgx_to_pull <- read_tsv("../metadata/mgx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mtx_stats_chosen <- mtx_stats %>% dplyr::filter(LIBID %in% mtx_to_pull)
mgx_stats_chosen <- mgx_stats %>% dplyr::filter(LIBID %in% mgx_to_pull)
mtx_mgx_stats_chosen <- read_tsv(file="../metadata/mtx_mgx_stats_chosen.tsv", show_col_types = FALSE)
##########
#MTX Library IDs per site
mtx_Sc_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Sc") %>% pull(mtx_LIBID)
mtx_Ch_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ch") %>% pull(mtx_LIBID)
mtx_Ac_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ac") %>% pull(mtx_LIBID)
mtx_Vf_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Vf") %>% pull(mtx_LIBID)
mtx_Tw_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Tw") %>% pull(mtx_LIBID)
#MGX Library IDs per site
mgx_Sc_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Sc") %>% pull(mgx_LIBID)
mgx_Ch_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ch") %>% pull(mgx_LIBID)
mgx_Ac_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ac") %>% pull(mgx_LIBID)
mgx_Vf_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Vf") %>% pull(mgx_LIBID)
mgx_Tw_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Tw") %>% pull(mgx_LIBID)
##########
#Load kraken2 filtered and renormalized dataframes.
#MTX data
rna_k2_minimizer_renorm <- lapply(mtx_to_pull, function(x){
df_out <- read_tsv(file=paste0("../data/k2_species_renorm/RNA/",x,"_k2_renorm.s.tsv"),
show_col_types = FALSE)
return(df_out)
})
names(rna_k2_minimizer_renorm) <- mtx_to_pull
#MGX data
k2_minimizer_renorm <- lapply(mgx_to_pull, function(x){
df_out <- read_tsv(file=paste0("../data/k2_species_renorm/DNA/",x,"_k2_renorm.s.tsv"),
show_col_types = FALSE)
return(df_out)
})
names(k2_minimizer_renorm) <- mgx_to_pull
#Load metadata for microbial orthologous groups
bact_og_metadata <- read_tsv("../metadata/bacteria_e5.og_annotations.tsv",
col_names = c("bacteria_OG",
"bacteria_eggnog_cat",
"bacteria_eggnog_desc"),
show_col_types = FALSE)
fungi_og_metadata <- read_tsv("../metadata/fungi_e5.og_annotations.tsv",
col_names = c("fungi_OG",
"fungi_eggnog_cat",
"fungi_eggnog_desc"),
show_col_types = FALSE)
virus_og_metadata <- read_tsv("../metadata/virus_e5.og_annotations.tsv",
col_names = c("virus_OG",
"virus_eggnog_cat",
"virus_eggnog_desc"),
show_col_types = FALSE)
###
og_metadata <- rbind(bact_og_metadata %>% dplyr::rename(feature=bacteria_OG,
eggnog_cat=bacteria_eggnog_cat,
eggnog_desc=bacteria_eggnog_desc),
fungi_og_metadata %>% dplyr::rename(feature=fungi_OG,
eggnog_cat=fungi_eggnog_cat,
eggnog_desc=fungi_eggnog_desc))
og_metadata <- rbind(og_metadata, virus_og_metadata %>% dplyr::rename(feature=virus_OG,
eggnog_cat=virus_eggnog_cat,
eggnog_desc=virus_eggnog_desc))
# Load GO annotations
GO_annot_all <- read_tsv("../metadata/all_GO_annotations.tsv", show_col_types = FALSE)
#WARNING: This file is large and needs to be copied from figshare into the metadata folder of this repo.
#figshare link: https://figshare.com/articles/dataset/EggNOG_to_Gene_Ontology_annotations/25688532?file=45848136
eggnog_to_GO_all_annot  <- read_tsv("../metadata/eggnog_to_GO_all_annot.tsv", show_col_types = FALSE)
eggnog_to_GO_all_annot  <- read_tsv("../../../skin_mtx/metadata/eggnog_to_GO_all_annot.tsv)
ff
ff
eggnog_to_GO_all_annot  <- read_tsv("
")"
eggnog_to_GO_all_annot  <- read_tsv("../../../skin_mtx/metadata/eggnog_to_GO_all_annot.tsv")
## Load eggnog to all GO annotations in eggnog db 5
eggnog_to_go_all_term2gene <- read_tsv("../metadata/eggnog_with_GO_all_term2gene.txt",
col_names = c("OG", "GO_ID"),
show_col_types=FALSE) %>%
dplyr::rename(from=GO_ID, to=OG) %>% dplyr::select(from,to)
#Load annotations for Gene Ontology biological processes and molecular functions
#GOs for biological process (BP)
GO_BP_term2name <- GO_annot_all %>%
dplyr::filter(ontology=="BP") %>%
dplyr::select(GO_ID, GO_desc) %>%
dplyr::rename(from=GO_ID, to=GO_desc)
eggnog_to_GO_BP_annot <- eggnog_to_GO_all_annot %>% dplyr::filter(ontology == "BP")
eggnog_to_GO_BP_term2gene <- eggnog_to_go_all_term2gene %>% dplyr::filter(from %in% eggnog_to_GO_BP_annot$GO_ID)
#GOs for Molecular Function (MF)
GO_MF_term2name <- GO_annot_all %>%
dplyr::filter(ontology=="MF") %>%
dplyr::select(GO_ID, GO_desc) %>%
dplyr::rename(from=GO_ID, to=GO_desc)
eggnog_to_GO_MF_annot <- eggnog_to_GO_all_annot %>% dplyr::filter(ontology == "MF")
eggnog_to_GO_MF_term2gene <- eggnog_to_go_all_term2gene %>% dplyr::filter(from %in% eggnog_to_GO_MF_annot$GO_ID)
#Load KEGG pathway and signature modules metadata (e.g https://www.genome.jp/brite/ko00002)
KEGG_module_metadata <- read_tsv("../metadata/KEGG_pathway_modules_metadata",
show_col_types = FALSE,
col_names = c("module", "module_desc"))
#Note the technical replicates besides the 3 bact spike ins
tech_reps <- metadata %>% dplyr::filter(comments == "technical replicate analysis" & subj_region != "3 Bac (VV:LM:PS)")
mtx_to_pull_with_reps <- c(mtx_to_pull, tech_reps %>% pull(LIBID))
mtx_bact_counts <- lapply(mtx_to_pull_with_reps, function(x){
df <- read_tsv(paste0("../data/MTX_feature_summary/",x,"_bact_OG_counts.tsv"),show_col_types = FALSE) %>%
dplyr::rename(feature=bacteria_OG)
df$feature <- gsub(pattern="\\|Bacteria", replacement="", x=df$feature)
return(df)
})
names(mtx_bact_counts) <- mtx_to_pull_with_reps
mgx_bact_counts <- lapply(mgx_to_pull, function(x){
df <- read_tsv(paste0("../data/MGX_feature_summary/",x,"_bact_OG_counts.tsv"),show_col_types = FALSE) %>%
dplyr::rename(feature=bacteria_OG)
df$feature <- gsub(pattern="\\|Bacteria", replacement="", x=df$feature)
return(df)
})
names(mgx_bact_counts) <- mgx_to_pull
#################
mtx_fungi_counts <- lapply(mtx_to_pull_with_reps, function(x){
df <- read_tsv(paste0("../data/MTX_feature_summary/",x,"_fungi_OG_counts.tsv"),show_col_types = FALSE) %>%
dplyr::rename(feature=fungi_OG)
df$feature <- gsub(pattern="\\|Fungi", replacement="", x=df$feature)
return(df)
})
names(mtx_fungi_counts) <- mtx_to_pull_with_reps
mgx_fungi_counts <- lapply(mgx_to_pull, function(x){
df <- read_tsv(paste0("../data/MGX_feature_summary/",x,"_fungi_OG_counts.tsv"),show_col_types = FALSE) %>%
dplyr::rename(feature=fungi_OG)
df$feature <- gsub(pattern="\\|Fungi", replacement="", x=df$feature)
return(df)
})
names(mgx_fungi_counts) <- mgx_to_pull
#################
mtx_virus_counts <- lapply(mtx_to_pull_with_reps, function(x){
read_tsv(paste0("../data/MTX_feature_summary/",x,"_virus_OG_counts.tsv"),show_col_types = FALSE) %>%
dplyr::rename(feature=virus_OG)
})
names(mtx_virus_counts) <- mtx_to_pull_with_reps
mgx_virus_counts <- lapply(mgx_to_pull, function(x){
read_tsv(paste0("../data/MGX_feature_summary/",x,"_virus_OG_counts.tsv"),show_col_types = FALSE) %>%
dplyr::rename(feature=virus_OG)
})
names(mgx_virus_counts) <- mgx_to_pull
eligible_mtx_metadata <- metadata %>% dplyr::filter(LIBID %in% c(mtx_to_pull, mgx_to_pull))
site_comparisons <- c("Sc_vs_Vf",
"Sc_vs_Ch",
"Sc_vs_Ac",
"Sc_vs_Tw",
"Ch_vs_Vf",
"Ch_vs_Ac",
"Ch_vs_Tw",
"Vf_vs_Ac",
"Tw_vs_Vf",
"Tw_vs_Ac")
site_DE_res_enrichments_GO_MF_GSEA <- readRDS(file="../data/DESeq2_out/site_DE_res_enrichments_GO_MF_GSEA.RDS")
site_DE_res_enrichments_GO_BP_GSEA <- readRDS(file="../data/DESeq2_out/site_DE_res_enrichments_GO_BP_GSEA.RDS")
site_clr_enrichments_GO_MF_GSEA <- readRDS(file="../data/aldex2_glmm_out/site_clr_enrichments_GO_MF_GSEA.RDS")
site_clr_enrichments_GO_BP_GSEA <- readRDS(file="../data/aldex2_glmm_out/site_clr_enrichments_GO_BP_GSEA.RDS")
summarise_GSEA_helper <- function(DESeq_GSEA_in,
aldex_GSEA_in){
DESeq_GSEA_in$signif_GSEA_DESeq2 <- TRUE
aldex_GSEA_in$signif_GSEA_clr <- TRUE
##Number of times a feature is significantly enriched by GSEA amongst the three methods
feature_GSEA_tally <- rbind(DESeq_GSEA_in[,c("ID", "Description")],
aldex_GSEA_in[,c("ID", "Description")],
)
feature_GSEA_tally_count <- plyr::count(feature_GSEA_tally, c("ID", "Description"))
##Add information about which methods were statistically significant
#https://stackoverflow.com/questions/8091303/simultaneously-merge-multiple-data-frames-in-a-list
feature_GSEA_tally_count_fmt <- list(feature_GSEA_tally_count,
DESeq_GSEA_in[,c("ID", "signif_GSEA_DESeq2", "DESeq_GSEA_NES", "DESeq_GSEA_padj")],
aldex_GSEA_in[,c("ID","signif_GSEA_clr", "aldex_GSEA_NES", "aldex_GSEA_padj")]) %>%
purrr::reduce(left_join, by = "ID")
feature_GSEA_tally_count_fmt <- feature_GSEA_tally_count_fmt %>%
mutate(across(starts_with("signif"), ~ replace_na(.x, FALSE)))
return(feature_GSEA_tally_count_fmt)
}
#add dummy row to an empty dataframe for merging purposes
add_dummy <- function(df){
if(nrow(df)==0){
df [ nrow(df) + 1 , ] <- NA
df$ID <- "placeholder"
}
return(df)
}
#e.g. site_DE_res_enrichments_GO_BP_GSEA
#comparison can be "Ch_vs_Vf" etc
compare_GSEA_across <- function(DESeq_GSEA_res,
aldex_GSEA_res,
comparison){
##############
#For bacteria#
##############
bact_DESeq_GSEA <- DESeq_GSEA_res[[comparison]]$bact_DESeq_GSEA_results@result %>%
dplyr::rename("DESeq_GSEA_NES"="NES", "DESeq_GSEA_padj"="p.adjust") %>% add_dummy(.)
bact_aldex_GSEA <- aldex_GSEA_res[[comparison]]$bact_GSEA_results@result %>%
dplyr::rename("aldex_GSEA_NES"="NES", "aldex_GSEA_padj"="p.adjust") %>% add_dummy(.)
#tally and summarize GSEA results across the three methods
bact_GSEA_tally <- summarise_GSEA_helper(DESeq_GSEA_in=bact_DESeq_GSEA,
aldex_GSEA_in=bact_aldex_GSEA) %>%
dplyr:::filter(ID != "placeholder")
# pathways with at least two hits from distinct methods
bact_GSEA_tally_for_plot_padj <- bact_GSEA_tally %>% dplyr::filter(freq == 2) %>%
dplyr::select(c("ID", "Description",
"DESeq_GSEA_padj",
"aldex_GSEA_padj")) %>% pivot_longer(!c("ID","Description"),
names_to = "method",
values_to = "GSEA_padj")
bact_GSEA_tally_for_plot_padj$method <- gsub(pattern="_padj", replacement="", x=bact_GSEA_tally_for_plot_padj$method)
bact_GSEA_tally_for_plot_NES <- bact_GSEA_tally %>% dplyr::filter(freq >= 2) %>%
dplyr::select(c("ID",
"DESeq_GSEA_NES",
"aldex_GSEA_NES")) %>% pivot_longer(!ID,
names_to = "method",
values_to = "GSEA_NES")
bact_GSEA_tally_for_plot_NES$method <- gsub(pattern="_NES", replacement="", x=bact_GSEA_tally_for_plot_NES$method)
bact_GSEA_tally_for_plot <- merge(bact_GSEA_tally_for_plot_padj, bact_GSEA_tally_for_plot_NES,
by = c("ID","method"))
###########
#For fungi#
###########
fungi_DESeq_GSEA <- DESeq_GSEA_res[[comparison]]$fungi_DESeq_GSEA_results@result %>%
dplyr::rename("DESeq_GSEA_NES"="NES", "DESeq_GSEA_padj"="p.adjust") %>% add_dummy(.)
fungi_aldex_GSEA <- aldex_GSEA_res[[comparison]]$fungi_GSEA_results@result %>%
dplyr::rename("aldex_GSEA_NES"="NES", "aldex_GSEA_padj"="p.adjust") %>% add_dummy(.)
#tally and summarize GSEA results across the three methods
fungi_GSEA_tally <- summarise_GSEA_helper(DESeq_GSEA_in=fungi_DESeq_GSEA,
aldex_GSEA_in=fungi_aldex_GSEA) %>%
dplyr:::filter(ID != "placeholder")
fungi_GSEA_tally_for_plot_padj <- fungi_GSEA_tally %>% dplyr::filter(freq == 2) %>%
dplyr::select(c("ID", "Description",
"DESeq_GSEA_padj",
"aldex_GSEA_padj"
)) %>% pivot_longer(!c("ID","Description"),
names_to = "method",
values_to = "GSEA_padj")
fungi_GSEA_tally_for_plot_padj$method <- gsub(pattern="_padj", replacement="", x=fungi_GSEA_tally_for_plot_padj$method)
fungi_GSEA_tally_for_plot_NES <- fungi_GSEA_tally %>% dplyr::filter(freq >= 2) %>%
dplyr::select(c("ID",
"DESeq_GSEA_NES",
"aldex_GSEA_NES")) %>% pivot_longer(!ID,
names_to = "method",
values_to = "GSEA_NES")
fungi_GSEA_tally_for_plot_NES$method <- gsub(pattern="_NES", replacement="", x=fungi_GSEA_tally_for_plot_NES$method)
fungi_GSEA_tally_for_plot <- merge(fungi_GSEA_tally_for_plot_padj, fungi_GSEA_tally_for_plot_NES,
by = c("ID","method"))
output <- tibble::lst(bact_GSEA_tally, bact_GSEA_tally_for_plot,
fungi_GSEA_tally, fungi_GSEA_tally_for_plot)
return(output)
}
#for BP
Ch_vs_Vf_GSEA_GO_BP_multi <- compare_GSEA_across(DESeq_GSEA_res = site_DE_res_enrichments_GO_BP_GSEA,
aldex_GSEA_res = site_clr_enrichments_GO_BP_GSEA,
comparison="Ch_vs_Vf")
summarise_GSEA_helper <- function(DESeq_GSEA_in,
aldex_GSEA_in){
DESeq_GSEA_in$signif_GSEA_DESeq2 <- TRUE
aldex_GSEA_in$signif_GSEA_clr <- TRUE
##Number of times a feature is significantly enriched by GSEA amongst the three methods
feature_GSEA_tally <- rbind(DESeq_GSEA_in[,c("ID", "Description")],
aldex_GSEA_in[,c("ID", "Description")])
feature_GSEA_tally_count <- plyr::count(feature_GSEA_tally, c("ID", "Description"))
##Add information about which methods were statistically significant
#https://stackoverflow.com/questions/8091303/simultaneously-merge-multiple-data-frames-in-a-list
feature_GSEA_tally_count_fmt <- list(feature_GSEA_tally_count,
DESeq_GSEA_in[,c("ID", "signif_GSEA_DESeq2", "DESeq_GSEA_NES", "DESeq_GSEA_padj")],
aldex_GSEA_in[,c("ID","signif_GSEA_clr", "aldex_GSEA_NES", "aldex_GSEA_padj")]) %>%
purrr::reduce(left_join, by = "ID")
feature_GSEA_tally_count_fmt <- feature_GSEA_tally_count_fmt %>%
mutate(across(starts_with("signif"), ~ replace_na(.x, FALSE)))
return(feature_GSEA_tally_count_fmt)
}
#add dummy row to an empty dataframe for merging purposes
add_dummy <- function(df){
if(nrow(df)==0){
df [ nrow(df) + 1 , ] <- NA
df$ID <- "placeholder"
}
return(df)
}
#e.g. site_DE_res_enrichments_GO_BP_GSEA
#comparison can be "Ch_vs_Vf" etc
compare_GSEA_across <- function(DESeq_GSEA_res,
aldex_GSEA_res,
comparison){
##############
#For bacteria#
##############
bact_DESeq_GSEA <- DESeq_GSEA_res[[comparison]]$bact_DESeq_GSEA_results@result %>%
dplyr::rename("DESeq_GSEA_NES"="NES", "DESeq_GSEA_padj"="p.adjust") %>% add_dummy(.)
bact_aldex_GSEA <- aldex_GSEA_res[[comparison]]$bact_GSEA_results@result %>%
dplyr::rename("aldex_GSEA_NES"="NES", "aldex_GSEA_padj"="p.adjust") %>% add_dummy(.)
#tally and summarize GSEA results across the three methods
bact_GSEA_tally <- summarise_GSEA_helper(DESeq_GSEA_in=bact_DESeq_GSEA,
aldex_GSEA_in=bact_aldex_GSEA) %>%
dplyr:::filter(ID != "placeholder")
# pathways with at least two hits from distinct methods
bact_GSEA_tally_for_plot_padj <- bact_GSEA_tally %>% dplyr::filter(freq == 2) %>%
dplyr::select(c("ID", "Description",
"DESeq_GSEA_padj",
"aldex_GSEA_padj")) %>% pivot_longer(!c("ID","Description"),
names_to = "method",
values_to = "GSEA_padj")
bact_GSEA_tally_for_plot_padj$method <- gsub(pattern="_padj", replacement="", x=bact_GSEA_tally_for_plot_padj$method)
bact_GSEA_tally_for_plot_NES <- bact_GSEA_tally %>% dplyr::filter(freq >= 2) %>%
dplyr::select(c("ID",
"DESeq_GSEA_NES",
"aldex_GSEA_NES")) %>% pivot_longer(!ID,
names_to = "method",
values_to = "GSEA_NES")
bact_GSEA_tally_for_plot_NES$method <- gsub(pattern="_NES", replacement="", x=bact_GSEA_tally_for_plot_NES$method)
bact_GSEA_tally_for_plot <- merge(bact_GSEA_tally_for_plot_padj, bact_GSEA_tally_for_plot_NES,
by = c("ID","method"))
###########
#For fungi#
###########
fungi_DESeq_GSEA <- DESeq_GSEA_res[[comparison]]$fungi_DESeq_GSEA_results@result %>%
dplyr::rename("DESeq_GSEA_NES"="NES", "DESeq_GSEA_padj"="p.adjust") %>% add_dummy(.)
fungi_aldex_GSEA <- aldex_GSEA_res[[comparison]]$fungi_GSEA_results@result %>%
dplyr::rename("aldex_GSEA_NES"="NES", "aldex_GSEA_padj"="p.adjust") %>% add_dummy(.)
#tally and summarize GSEA results across the three methods
fungi_GSEA_tally <- summarise_GSEA_helper(DESeq_GSEA_in=fungi_DESeq_GSEA,
aldex_GSEA_in=fungi_aldex_GSEA) %>%
dplyr:::filter(ID != "placeholder")
fungi_GSEA_tally_for_plot_padj <- fungi_GSEA_tally %>% dplyr::filter(freq == 2) %>%
dplyr::select(c("ID", "Description",
"DESeq_GSEA_padj",
"aldex_GSEA_padj"
)) %>% pivot_longer(!c("ID","Description"),
names_to = "method",
values_to = "GSEA_padj")
fungi_GSEA_tally_for_plot_padj$method <- gsub(pattern="_padj", replacement="", x=fungi_GSEA_tally_for_plot_padj$method)
fungi_GSEA_tally_for_plot_NES <- fungi_GSEA_tally %>% dplyr::filter(freq >= 2) %>%
dplyr::select(c("ID",
"DESeq_GSEA_NES",
"aldex_GSEA_NES")) %>% pivot_longer(!ID,
names_to = "method",
values_to = "GSEA_NES")
fungi_GSEA_tally_for_plot_NES$method <- gsub(pattern="_NES", replacement="", x=fungi_GSEA_tally_for_plot_NES$method)
fungi_GSEA_tally_for_plot <- merge(fungi_GSEA_tally_for_plot_padj, fungi_GSEA_tally_for_plot_NES,
by = c("ID","method"))
output <- tibble::lst(bact_GSEA_tally, bact_GSEA_tally_for_plot,
fungi_GSEA_tally, fungi_GSEA_tally_for_plot)
return(output)
}
#for BP
Ch_vs_Vf_GSEA_GO_BP_multi <- compare_GSEA_across(DESeq_GSEA_res = site_DE_res_enrichments_GO_BP_GSEA,
aldex_GSEA_res = site_clr_enrichments_GO_BP_GSEA,
comparison="Ch_vs_Vf")
#For MF
Ch_vs_Vf_GSEA_GO_MF_multi <- compare_GSEA_across(DESeq_GSEA_res = site_DE_res_enrichments_GO_MF_GSEA,
aldex_GSEA_res = site_clr_enrichments_GO_MF_GSEA,
comparison="Ch_vs_Vf")
#for BP
Tw_vs_Vf_GSEA_GO_BP_multi <- compare_GSEA_across(DESeq_GSEA_res = site_DE_res_enrichments_GO_BP_GSEA,
aldex_GSEA_res = site_clr_enrichments_GO_BP_GSEA,
ancombc_GSEA_res = site_ANCOMBC_res_enrichments_GO_BP_GSEA,
comparison="Tw_vs_Vf")
#for BP
Tw_vs_Vf_GSEA_GO_BP_multi <- compare_GSEA_across(DESeq_GSEA_res = site_DE_res_enrichments_GO_BP_GSEA,
aldex_GSEA_res = site_clr_enrichments_GO_BP_GSEA,
comparison="Tw_vs_Vf")
#For MF
Tw_vs_Vf_GSEA_GO_MF_multi <- compare_GSEA_across(DESeq_GSEA_res = site_DE_res_enrichments_GO_MF_GSEA,
aldex_GSEA_res = site_clr_enrichments_GO_MF_GSEA,
comparison="Tw_vs_Vf")
View(Ch_vs_Vf_GSEA_GO_BP_multi)
test <- Ch_vs_Vf_GSEA_GO_BP_multi$bact_GSEA_tally
View(test)
test2 <- Ch_vs_Vf_GSEA_GO_BP_multi$fungi_GSEA_tally
View(test2)
test2 <- Ch_vs_Vf_GSEA_GO_MF_multi$fungi_GSEA_tally
test <- Ch_vs_Vf_GSEA_GO_MF_multi$bact_GSEA_tally
test <- Tw_vs_Vf_GSEA_GO_BP_multi$bact_GSEA_tally
test2 <- Tw_vs_Vf_GSEA_GO_MF_multi$bact_GSEA_tally
View(test)
