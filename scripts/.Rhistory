mtx_to_pull <- read_tsv("../metadata/mtx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mgx_to_pull <- read_tsv("../metadata/mgx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mtx_stats_chosen <- mtx_stats %>% dplyr::filter(LIBID %in% mtx_to_pull)
mgx_stats_chosen <- mgx_stats %>% dplyr::filter(LIBID %in% mgx_to_pull)
mtx_mgx_stats_chosen <- read_tsv(file="../metadata/mtx_mgx_stats_chosen.tsv", show_col_types = FALSE)
#from the 102
n_sites_df <- plyr::count(mtx_stats_chosen, "region") %>% dplyr::rename(n_libs_total=freq)
##########
#MTX Library IDs per site
mtx_Sc_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Sc") %>% pull(mtx_LIBID)
mtx_Ch_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ch") %>% pull(mtx_LIBID)
mtx_Ac_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ac") %>% pull(mtx_LIBID)
mtx_Vf_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Vf") %>% pull(mtx_LIBID)
mtx_Tw_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Tw") %>% pull(mtx_LIBID)
#load custom functions
source("aldex2_wrappers.R")
#Function to extract species specific clr abundances
extract_species_clr <- function(species){
species_clr <- lapply(aldex_clr_values, function(x){
x$mgx_LIBID <- rownames(x)
df_subset <- x[,c("mgx_LIBID",species)]
return(df_subset)
}) %>% do.call("rbind",.)
return(species_clr)
}
#Function to extract species specific k2 read counts
extract_species_k2_counts <- function(species, input_list=rna_k2_minimizer_renorm){
species_k2 <- lapply(input_list, function(x){
df_subset <- x %>% dplyr::filter(k2_taxon == species) %>% dplyr::select(mtx_LIBID, paired_counts)
return(df_subset)
}) %>% do.call("rbind",.)
return(species_k2)
}
#Function to melt the pid matrix after MSA into a df for heatmapping
flattenMatrix <- function(path_to_matrix){
pim <- read_table(path_to_matrix,
skip = 1,
col_names = FALSE,
show_col_types = FALSE) %>%
as.data.frame()
colnames(pim) <- c("peptide_id",pim$X1)
rownames(pim) <- pim$peptide_id
peptide_order <- sort(pim$peptide_id)
pim <- pim %>% dplyr::select(-peptide_id)
##Reorder rows and columns in the mat
pim <- pim[peptide_order, peptide_order]
pim[lower.tri(pim)] <- NA
pim$peptide_id <- rownames(pim)
# Reshape to suit ggplot, remove NAs, and sort the labels
pim_melt <- reshape2::melt(pim,
"peptide_id",
na.rm=TRUE,
value.name="percent_id")
#three s.f
pim_melt$percent_id <- signif(pim_melt$percent_id,
3)
return(pim_melt)
}
#Function to re-position the pairwise comparisons to the upper triangular for nicer triangular heatmaps
reposition_triangular <- function(cov_df, pim_df){
cov_df <- cov_df %>% dplyr::select(c("qseq_name",
"sseq_name",
"qseq_cov",
"sseq_cov"))
cov_df$qseq_cov <-  signif(cov_df$qseq_cov, 3)
cov_df$sseq_cov <-  signif(cov_df$sseq_cov, 3)
#add self comparisons, which would be 100% coverage by definition
peptide_ids <- c(cov_df$qseq_name, cov_df$sseq_name) %>% unique(.)
self_comparisons_df <- data.frame(qseq_name=peptide_ids,
sseq_name=peptide_ids,
qseq_cov=100,
sseq_cov=100)
cov_df <- rbind(cov_df, self_comparisons_df)
cov_df_mirror <- cov_df %>% dplyr::rename(sseqid=qseq_name,
qseqid=sseq_name,
sseq_coverage=qseq_cov,
qseq_coverage=sseq_cov) %>%
dplyr::rename(qseq_name=qseqid,
sseq_name=sseqid,
qseq_cov=qseq_coverage,
sseq_cov=sseq_coverage)
cov_df_fmt <- rbind(cov_df, cov_df_mirror)
#temp key for filtering
cov_df_fmt$comparison <- paste0(cov_df_fmt$qseq_name,"-",cov_df_fmt$sseq_name)
pim_df$comparison <- paste0(pim_df$variable,"-",pim_df$peptide_id)
cov_df_filtered <- cov_df_fmt %>% dplyr::filter(comparison %in% pim_df$comparison)
#in this format: query coverage % (subject coverage %)
#cov_df_filtered$query_and_subj_cov <- paste0(cov_df_filtered$qseq_cov,
#                                             " (",cov_df_filtered$sseq_cov,")")
return(cov_df_filtered %>% dplyr::select(-comparison))
}
rna_k2_minimizer_renorm <- lapply(mtx_to_pull, function(x){
df_out <- read_tsv(file=paste0("../data/k2_species_renorm/RNA/",x,"_k2_renorm.s.tsv"),
show_col_types = FALSE)
return(df_out)
})
names(rna_k2_minimizer_renorm) <- mtx_to_pull
aldex_clr_values <- readRDS("../data/aldex_clr_values.RDS")
aldex_clr_values_fmt <- lapply(names(aldex_clr_values), function(x){
df_fmt <- aldex_clr_values[[x]]
df_fmt$mgx_LIBID <- rownames(df_fmt)
df_fmt <- merge(df_fmt, mtx_mgx_stats_chosen %>% dplyr::select(mgx_LIBID, mtx_LIBID), by="mgx_LIBID")
return(df_fmt)
})
names(aldex_clr_values_fmt) <- names(aldex_clr_values)
transcript_vs_clr_scatterplot <- function(vst_mat, mean_clr, transcript, species){
vst_df <- t(vst_mat) %>% as.data.frame()
vst_df$mtx_LIBID <- rownames(vst_df)
species_mean_clr <- mean_clr %>% dplyr::select(species,"mtx_LIBID")
transcript_and_clr_df <- merge(vst_df,species_mean_clr, by ="mtx_LIBID")
ggscatter(transcript_and_clr_df, x = species,
y = transcript, add = "reg.line") + stat_cor(method="spearman") + theme_classic()
}
setwd("../../../../local_project/skin_mtx/scripts/")
Malassezia_integer_count_matrix <- read.table(file="../data/Malassezia_integer_count_matrix.txt")
#computed using aldex2, centered log ratio transform
aldex_raw_clr_values <- readRDS("../data/aldex_raw_clr_values.RDS")
aldex_raw_clr_values <- readRDS("../processed/aldex_raw_clr_values.RDS")
#Malassezia signal P 6 results
malassezia_secretory <- read_tsv("../data/signalP_out/Malassezia_transcripts_translated_signalP6_prediction_results_secretory_fmt.tsv",
col_names = c("ID", "prediction",
"OTHER","SP", "CS_position", "pangene",
show_col_types=FALSE))
M_res_mtx_vs_C_acnes_mgx_Sc <- get_mtx_vs_mgx_correlation(mtx_count_matrix = Malassezia_integer_count_matrix,
aldex_clr_input = aldex_raw_clr_values[["Sc_bracken_clr"]],
secretory_prediction_df = malassezia_secretory,
site_libs=mtx_Sc_ids,
species_transcriptome_name = "DNF",
species_transcriptome_read_threshold=200000,
responding_species = "Cutibacterium_acnes", cor_test_method = "spearman" )
library(tidyverse)
library(reshape2)
library(vegan)
library(ggpubr)
library(DESeq2)
library(ALDEx2) #v1.28.1
library(propr) #version 2.1.2
M_res_mtx_vs_C_acnes_mgx_Sc <- get_mtx_vs_mgx_correlation(mtx_count_matrix = Malassezia_integer_count_matrix,
aldex_clr_input = aldex_raw_clr_values[["Sc_bracken_clr"]],
secretory_prediction_df = malassezia_secretory,
site_libs=mtx_Sc_ids,
species_transcriptome_name = "DNF",
species_transcriptome_read_threshold=200000,
responding_species = "Cutibacterium_acnes", cor_test_method = "spearman" )
Malassezia_integer_count_matrix <- read.table(file="../data/Malassezia_integer_count_matrix.txt")
M_res_mtx_vs_C_acnes_mgx_Sc <- get_mtx_vs_mgx_correlation(mtx_count_matrix = Malassezia_integer_count_matrix,
aldex_clr_input = aldex_raw_clr_values[["Sc_bracken_clr"]],
secretory_prediction_df = malassezia_secretory,
site_libs=mtx_Sc_ids,
species_transcriptome_name = "DNF",
species_transcriptome_read_threshold=200000,
responding_species = "Cutibacterium_acnes", cor_test_method = "spearman" )
View(aldex_raw_clr_values)
View(Malassezia_integer_count_matrix)
class(Malassezia_integer_count_matrix)
Malassezia_integer_count_matrix <- read.table(file="../data/Malassezia_integer_count_matrix.txt")
class(Malassezia_integer_count_matrix)
setwd("../../manuscript/skin_metatranscriptome/scripts/")
Malassezia_salmon_files <- file.path("../data/Malassezia_mtx_mapping", paste0(mtx_to_pull, "_quant.sf"))
names(Malassezia_salmon_files) <- mtx_to_pull
Malassezia_txi.salmon <- tximport(Malassezia_salmon_files, type="salmon", tx2gene=Malassezia_tx2gene)
#For salmon tximport
Malassezia_tx2gene <- read_tsv("../metadata/Malassezia_tx2gene.tsv", col_names = FALSE, show_col_types = FALSE) #21037 transcripts and 21025 genes
#Add Malassezia gene annotations to the eggnog annotation file
colnames(Malassezia_tx2gene) <- c("query","gene")
Malassezia_txi.salmon <- tximport(Malassezia_salmon_files, type="salmon", tx2gene=Malassezia_tx2gene)
Malassezia_count_matrix <- Malassezia_txi.salmon$counts
#Convert to matrix of integers
Malassezia_integer_count_matrix <- round(Malassezia_count_matrix)
mode(Malassezia_integer_count_matrix) <- "integer"
#Malassezia signal P 6 results
malassezia_secretory <- read_tsv("../data/signalP_out/Malassezia_transcripts_translated_signalP6_prediction_results_secretory_fmt.tsv",
col_names = c("ID", "prediction",
"OTHER","SP", "CS_position", "pangene",
show_col_types=FALSE))
#Malassezia signal P 6 results
malassezia_secretory <- read_tsv("../data/signalP_out/Malassezia_transcripts_translated_signalP6_prediction_results_secretory_fmt.tsv",
col_names = c("ID", "prediction",
"OTHER","SP", "CS_position", "pangene"),
show_col_types=FALSE)
M_res_mtx_vs_C_acnes_mgx_Sc <- get_mtx_vs_mgx_correlation(mtx_count_matrix = Malassezia_integer_count_matrix,
aldex_clr_input = aldex_raw_clr_values[["Sc_bracken_clr"]],
secretory_prediction_df = malassezia_secretory,
site_libs=mtx_Sc_ids,
species_transcriptome_name = "DNF",
species_transcriptome_read_threshold=200000,
responding_species = "Cutibacterium_acnes", cor_test_method = "spearman" )
test <- M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory
View(test)
write_tsv(M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory,
"../data/M_res_mtx_vs_C_acnes_mgx_Sc_vst.tsv")
class(test)
#save outputs
saveRDS(M_res_mtx_vs_C_acnes_mgx_Sc, file="../data/M_res_mtx_vs_C_acnes_mgx_Sc.RDS")
M_res_mtx_vs_C_acnes_mgx_Sc <- readRDS("../data/M_res_mtx_vs_C_acnes_mgx_Sc.RDS")
transcript_vs_clr_scatterplot(vst_mat = M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Sc_bracken_clr"]],
transcript="DNF11_2196",
species="Cutibacterium_acnes") + xlab("Mean clr (Cutibacterium acnes)") + ylab("vst (DNF11_2196)")
M_res_DNF11_2196_vs_C_acnes_mgx_scatter <- transcript_vs_clr_scatterplot(vst_mat = M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Sc_bracken_clr"]],
transcript="DNF11_2196",
species="Cutibacterium_acnes") + xlab("Mean clr (Cutibacterium acnes)") + ylab("vst (DNF11_2196)")
ggsave(filename="../plots/M_res_DNF11_2196_vs_C_acnes_mgx_scatter.pdf",
plot=M_res_DNF11_2196_vs_C_acnes_mgx_scatter,
height = 5, width = 8)
M_res_DNF11_2196_vs_C_acnes_mgx_scatter
M_res_DNF11_2196_vs_M_res_mgx_scatter <- transcript_vs_clr_scatterplot(vst_mat = M_res_mtx_vs_M_res_mgx_Sc$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Sc_bracken_clr"]],
transcript="DNF11_2196",
species="Malassezia_restricta") + xlab("Mean clr (Malassezia_restricta)") + ylab("vst (DNF11_2196)")
M_res_mtx_vs_M_res_mgx_Sc <- get_mtx_vs_mgx_correlation(mtx_count_matrix = Malassezia_integer_count_matrix,
aldex_clr_input = aldex_raw_clr_values[["Sc_bracken_clr"]],
secretory_prediction_df = malassezia_secretory,
site_libs=mtx_Sc_ids,
species_transcriptome_name = "DNF",
species_transcriptome_read_threshold=200000,
responding_species = "Malassezia_restricta", cor_test_method = "spearman" )
#save outputs
saveRDS(M_res_mtx_vs_M_res_mgx_Sc, file="../data/M_res_mtx_vs_M_res_mgx_Sc.RDS")
eight_skin_bact_mtx_counts <- lapply(mtx_to_pull, function(x){
df <- read_tsv(file=paste0("../processed/mtx_species_mapping/bt2_out/RNA/",
x,
"_bt2_microbe_pangenome_aligned_filtered_cov.tsv"),
show_col_types = FALSE)
df$LIBID <- x
return(df)
})
eight_skin_bact_mtx_counts <- lapply(mtx_to_pull, function(x){
df <- read_tsv(file=paste0("../data/mtx_species_mapping/bt2_out/RNA/",
x,
"_bt2_microbe_pangenome_aligned_filtered_cov.tsv"),
show_col_types = FALSE)
df$LIBID <- x
return(df)
})
names(eight_skin_bact_mtx_counts) <- mtx_to_pull
eight_skin_bact_mtx_counts_matrix <- do.call("rbind",eight_skin_bact_mtx_counts)
eight_skin_bact_mtx_counts_matrix <- pivot_wider(eight_skin_bact_mtx_counts_matrix %>%
dplyr::select(pangene, unpaired_read_count, LIBID), names_from = LIBID,
values_from = unpaired_read_count) %>%
as.data.frame()
rownames(eight_skin_bact_mtx_counts_matrix) <- eight_skin_bact_mtx_counts_matrix$pangene
eight_skin_bact_mtx_counts_matrix <- eight_skin_bact_mtx_counts_matrix %>% dplyr::select(-pangene) %>% as.matrix()
#This matrix operation is much faster than mutate_all(~replace(.,is.na(.),0))
eight_skin_bact_mtx_counts_matrix[is.na(eight_skin_bact_mtx_counts_matrix)] <- 0
#Load signal P results
eight_skin_microbial_secretory <- read_tsv("../data/signalP_out/eight_skin_bact_pangenome_signalP6_prediction_results_secretory.txt",
col_names = c("pangene","prediction",
"OTHER","SP","LIPO","TAT","TATLIPO", "PILIN", "CS_position"),
show_col_types = FALSE)
##One hit to a lysophospholipase, but another hit in the opposite direction to a triacylglycerol lipase
C_acnes_mtx_vs_C_gran_mgx_Ch <- get_mtx_vs_mgx_correlation(mtx_count_matrix = eight_skin_bact_mtx_counts_matrix,
aldex_clr_input = aldex_raw_clr_values[["Ch_bracken_clr"]],
secretory_prediction_df = eight_skin_microbial_secretory,
site_libs=mtx_Ch_ids,species_transcriptome_name = "Cutibacterium_acnes",
responding_species = "Cutibacterium_granulosum", cor_test = "spearman",
species_transcriptome_read_threshold=200000,
manual_vst_nsub = FALSE)
#save outputs
saveRDS(C_acnes_mtx_vs_C_gran_mgx_Ch, file="../data/C_acnes_mtx_vs_C_gran_mgx_Ch.RDS")
C_acnes_mtx_vs_C_acnes_mgx_Ch <- get_mtx_vs_mgx_correlation_v1(mtx_count_matrix = eight_skin_bact_mtx_counts_matrix,
abundance_df = aldex_clr_values_fmt[["Ch_bracken_clr"]],
secretory_prediction_df = eight_skin_microbial_secretory,
site_libs=mtx_Ch_ids,
species_transcriptome_name = "Cutibacterium_acnes",
species_transcriptome_read_threshold=200000,
responding_species = "Cutibacterium_acnes", cor_test = "spearman",
manual_vst_nsub=FALSE)
C_acnes_mtx_vs_C_acnes_mgx_Ch <- get_mtx_vs_mgx_correlation(mtx_count_matrix = eight_skin_bact_mtx_counts_matrix,
abundance_df = aldex_clr_values_fmt[["Ch_bracken_clr"]],
secretory_prediction_df = eight_skin_microbial_secretory,
site_libs=mtx_Ch_ids,
species_transcriptome_name = "Cutibacterium_acnes",
species_transcriptome_read_threshold=200000,
responding_species = "Cutibacterium_acnes", cor_test = "spearman",
manual_vst_nsub=FALSE)
C_acnes_mtx_vs_C_acnes_mgx_Ch <- get_mtx_vs_mgx_correlation(mtx_count_matrix = eight_skin_bact_mtx_counts_matrix,
aldex_clr_input = aldex_raw_clr_values[["Ch_bracken_clr"]],
secretory_prediction_df = eight_skin_microbial_secretory,
site_libs=mtx_Ch_ids,species_transcriptome_name = "Cutibacterium_acnes",
responding_species = "Cutibacterium_acnes", cor_test = "spearman",
species_transcriptome_read_threshold=200000,
manual_vst_nsub = FALSE)
#save outputs
saveRDS(C_acnes_mtx_vs_C_acnes_mgx_Ch, file="../data/C_acnes_mtx_vs_C_acnes_mgx_Ch.RDS")
M_res_mtx_vs_M_res_mgx_Sc <- readRDS("../data/M_res_mtx_vs_M_res_mgx_Sc.RDS")
M_res_DNF11_2196_vs_M_res_mgx_scatter <- transcript_vs_clr_scatterplot(vst_mat = M_res_mtx_vs_M_res_mgx_Sc$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Sc_bracken_clr"]],
transcript="DNF11_2196",
species="Malassezia_restricta") + xlab("Mean clr (Malassezia_restricta)") + ylab("vst (DNF11_2196)")
M_res_DNF11_2196_vs_M_res_mgx_scatter
ggsave(filename="../plots/M_res_DNF11_2196_vs_M_res_mgx_scatter.pdf",
plot=M_res_DNF11_2196_vs_M_res_mgx_scatter,
height = 5, width = 8)
M_res_mtx_vs_C_acnes_mgx_Sc <- readRDS("../data/M_res_mtx_vs_C_acnes_mgx_Sc.RDS")
M_res_vs_C_acnes_mgx_to_plot <- mtx_mgx_stats_chosen %>% dplyr::filter(mtx_LIBID %in% colnames(M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory)) %>% pull(mgx_LIBID)
ggscatter(aldex_clr_values_fmt$Sc_bracken_clr %>% dplyr::filter(mtx_LIBID %in% colnames(M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory)), x = "Cutibacterium_acnes",
y = "Malassezia_restricta", add = "reg.line") + stat_cor(method="spearman")
M_res_abun_vs_C_acnes_abun_scatter <- ggscatter(aldex_clr_values_fmt$Sc_bracken_clr %>% dplyr::filter(mtx_LIBID %in% colnames(M_res_mtx_vs_C_acnes_mgx_Sc$count_matrix_vst_secretory)), x = "Cutibacterium_acnes",
y = "Malassezia_restricta", add = "reg.line") + stat_cor(method="spearman")
ggsave(filename="../plots/M_res_abun_vs_C_acnes_abun_scatter.pdf",
plot=M_res_abun_vs_C_acnes_abun_scatter,
height = 5, width = 8)
M_res_abun_vs_C_acnes_abun_scatter
C_acnes_mtx_vs_C_gran_mgx_Ch <- readRDS("../data/C_acnes_mtx_vs_C_acnes_mgx_Ch.RDS")
View(C_acnes_mtx_vs_C_gran_mgx_Ch)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano <- ggplot(data=C_acnes_mtx_vs_C_gran_mgx_Ch$corr_df, aes(y=-log10(p_adj),x=corr_coeff)) +
geom_point(aes(colour = factor(significant))) + theme_classic() + scale_color_manual(values=c("black","red")) + geom_hline(yintercept=-log10(0.05), linetype = "dashed") + geom_vline(xintercept=c(-0.7,0.7), linetype="dashed") +
geom_label_repel(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df %>% filter(p_adj < 0.05),
aes(label=pangene),
size = 3)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano <- ggplot(data=C_acnes_mtx_vs_C_gran_mgx_Ch$corr_df, aes(y=-log10(p_adj),x=corr_coeff)) +
geom_point(aes(colour = factor(significant))) + theme_classic() + scale_color_manual(values=c("black","red")) + geom_hline(yintercept=-log10(0.05), linetype = "dashed") + geom_vline(xintercept=c(-0.7,0.7), linetype="dashed") +
geom_label_repel(data=C_acnes_mtx_vs_C_gran_mgx_Ch$corr_df %>% filter(p_adj < 0.05),
aes(label=pangene),
size = 3)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano
View(C_acnes_mtx_vs_C_gran_mgx_Ch)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df <- C_acnes_mtx_vs_C_gran_mgx_Ch$corr_df
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df <- C_acnes_mtx_vs_C_gran_mgx_Ch$corr_df
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$significant <- ifelse(C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$p_adj < 0.05,
TRUE, FALSE)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano <- ggplot(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df, aes(y=-log10(p_adj),x=corr_coeff)) +
geom_point(aes(colour = factor(significant))) + theme_classic() + scale_color_manual(values=c("black","red")) + geom_hline(yintercept=-log10(0.05), linetype = "dashed") + geom_vline(xintercept=c(-0.7,0.7), linetype="dashed") +
geom_label_repel(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df %>% filter(p_adj < 0.05),
aes(label=pangene),
size = 3)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$significant <- ifelse(C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$p_adj < 0.1,
TRUE, FALSE)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano <- ggplot(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df, aes(y=-log10(p_adj),x=corr_coeff)) +
geom_point(aes(colour = factor(significant))) + theme_classic() + scale_color_manual(values=c("black","red")) + geom_hline(yintercept=-log10(0.05), linetype = "dashed") + geom_vline(xintercept=c(-0.7,0.7), linetype="dashed") +
geom_label_repel(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df %>% filter(p_adj < 0.05),
aes(label=pangene),
size = 3)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$significant <- ifelse(C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$p_adj < 0.05,
TRUE, FALSE)
View(C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df)
C_acnes_mtx_vs_C_gran_mgx_Ch <- readRDS("../data/C_acnes_mtx_vs_C_gran_mgx_Ch.RDS")
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df <- C_acnes_mtx_vs_C_gran_mgx_Ch$corr_df
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$significant <- ifelse(C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df$p_adj < 0.05,
TRUE, FALSE)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano <- ggplot(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df, aes(y=-log10(p_adj),x=corr_coeff)) +
geom_point(aes(colour = factor(significant))) + theme_classic() + scale_color_manual(values=c("black","red")) + geom_hline(yintercept=-log10(0.05), linetype = "dashed") + geom_vline(xintercept=c(-0.7,0.7), linetype="dashed") +
geom_label_repel(data=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_df %>% filter(p_adj < 0.05),
aes(label=pangene),
size = 3)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano
ggsave(filename="../plots/C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano.pdf",
plot=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano,
height = 5, width = 8)
ggsave(filename="../plots/C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano.pdf",
plot=C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano,
height = 5, width = 8)
C_acnes_mtx_vs_C_gran_mgx_Ch_corr_volcano
transcript_vs_clr_scatterplot(vst_mat = C_acnes_mtx_vs_C_gran_mgx_Ch$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Ch_bracken_clr"]],
transcript="Cutibacterium_acnes_cluster_2293_AAT83849.1",
species="Cutibacterium_granulosum") +
xlab("Mean clr (Cutibacterium_granulosum)") + ylab("vst (Cutibacterium_acnes_AAT83849.1)")
C_acnes_AAT83849_vs_C_granulosum_mgx_scatter <- transcript_vs_clr_scatterplot(vst_mat = C_acnes_mtx_vs_C_gran_mgx_Ch$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Ch_bracken_clr"]],
transcript="Cutibacterium_acnes_cluster_2293_AAT83849.1",
species="Cutibacterium_granulosum") +
xlab("Mean clr (Cutibacterium_granulosum)") + ylab("vst (Cutibacterium_acnes_AAT83849.1)")
ggsave(filename="../plots/C_acnes_AAT83849_vs_C_granulosum_mgx_scatter.pdf",
plot=C_acnes_AAT83849_vs_C_granulosum_mgx_scatter,
height = 5, width = 8)
C_acnes_AAT83849_vs_C_granulosum_mgx_scatter
C_acnes_mtx_vs_C_acnes_mgx_Ch <- readRDS("../data/C_acnes_mtx_vs_C_acnes_mgx_Ch.RDS")
C_acnes_mtx_vs_C_acnes_mgx_Ch <- readRDS("../data/C_acnes_mtx_vs_C_acnes_mgx_Ch.RDS")
C_acnes_AAT83849_vs_C_acnes_mgx_scatter <- transcript_vs_clr_scatterplot(vst_mat = C_acnes_mtx_vs_C_acnes_mgx_Ch$count_matrix_vst_secretory,
mean_clr = aldex_clr_values_fmt[["Ch_bracken_clr"]],
transcript="Cutibacterium_acnes_cluster_2293_AAT83849.1",
species="Cutibacterium_acnes") +
xlab("Mean clr (Cutibacterium_acnes)") + ylab("vst (Cutibacterium_acnes_AAT83849.1)")
C_acnes_AAT83849_vs_C_acnes_mgx_scatter
ggsave(filename="../plots/C_acnes_AAT83849_vs_C_acnes_mgx_scatter.pdf",
plot=C_acnes_AAT83849_vs_C_acnes_mgx_scatter,
height = 5, width = 8)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mock_comm_DNA_metadata <- read_tsv("../metadata/mock_comm_DNA_metadata.txt")
mock_comm_DNA_composition <- read_tsv("../metadata/mock_comm_DNA_composition.txt")
mock_comm_DNA_composition <- read_tsv("../metadata/mock_comm_DNA_composition.txt")
mock_comm_DNA_metadata <- read_tsv("../metadata/mock_comm_DNA_metadata.txt", show_col_types = FALSE)
mock_comm_DNA_composition <- read_tsv("../metadata/mock_comm_DNA_composition.txt", show_col_types = FALSE)
#mock_comm_DNA_composition$species <- gsub(pattern=" ", replacement="_",x=mock_comm_DNA_composition$species)
mock_comm_DNA_composition$species <- gsub(pattern="_MRSA|_VRE", replacement="",x=mock_comm_DNA_composition$species)
#S enterica is S typhi
mock_comm_DNA_composition$species <- gsub(pattern="typimurium", replacement="enterica",x=mock_comm_DNA_composition$species)
#colorblind friendly palette
c24 <- c(
"dodgerblue2", "#E31A1C", # red
"green4",
"#6A3D9A", # purple
"#FF7F00", # orange
"black", "gold1",
"skyblue2",
"palegreen2",
"#CAB2D6", # lt purple
"#FDBF6F", # lt orange
"gray70", "khaki2",
"maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
"darkturquoise", "green1", "yellow4", "yellow3",
"darkorange4", "brown"
)
k2_files_to_load <- list.files(path="../data/mock_comm_DNA_out",pattern="_k2.s.tsv",full.names=T)
k2_file_ids <- word(string=k2_files_to_load,1,sep="_FKDL")
k2_file_ids <- word(string=k2_file_ids,4,sep="/")
mock_comm_mgx_k2 <- lapply(k2_files_to_load, function(x){
output <- read_tsv(file=x,show_col_types = FALSE,
col_names = c("rel_abun", "paired_reads", "minimizers","distinct_minimizers","species"))
return(output)
})
names(mock_comm_mgx_k2) <- k2_file_ids
#Keep only the species present in the mock communities (roughly)
mock_comm_mgx_k2_species_filt <- lapply(k2_file_ids, function(x){
k2_df <- mock_comm_mgx_k2[[x]]
mock_comm_ident <- mock_comm_DNA_metadata %>% dplyr::filter(LIBID==x) %>% pull(mock_comm_id)
ground_truth_species <- mock_comm_DNA_composition %>%
dplyr::filter(mock_comm_id == mock_comm_ident) %>% pull(species)
#S enterica is S typhi
k2_df_filt <- k2_df %>% dplyr::filter(species %in% c(ground_truth_species))
k2_df_filt$LIBID <- x
return(k2_df_filt)
})
names(mock_comm_mgx_k2_species_filt) <- k2_file_ids
mock_comm_mgx_k2_species_filt_df <- do.call("rbind",mock_comm_mgx_k2_species_filt)
mock_comm_mgx_k2_species_filt_df <- merge(mock_comm_mgx_k2_species_filt_df,
mock_comm_DNA_metadata)
#cor df for plotting. Correlate rel abun from trizol vs rel abun from EZ1
mock_communities_chosen <- unique(mock_comm_mgx_k2_species_filt_df$mock_comm_id)
mock_comm_mgx_k2_species_filt_cor_df <- lapply(mock_communities_chosen, function(x){
#relative abundance for EZ1 extraction
EZ1_df <- mock_comm_mgx_k2_species_filt_df %>%
dplyr::filter(mock_comm_id==x & DNA_extraction_method == "EZ1") %>%
dplyr::select(rel_abun, species) %>%
dplyr::rename(EZ1_DNA_rel_abun=rel_abun)
#relative abundance for trizol extraction
trizol_df <- mock_comm_mgx_k2_species_filt_df %>%
dplyr::filter(mock_comm_id==x & DNA_extraction_method == "trizol") %>%
dplyr::select(rel_abun, species) %>%
dplyr::rename(trizol_DNA_rel_abun=rel_abun)
output_df <- merge(EZ1_df, trizol_df, by = "species")
output_df$mock_comm_id <- x
return(output_df)
}) %>% do.call("rbind",.)
mock_comm_mgx_k2_species_filt_cor_df$genus <- word(string=mock_comm_mgx_k2_species_filt_cor_df$species,
start=1)
#Color code by genus
ggplot(data=mock_comm_mgx_k2_species_filt_cor_df, aes(x=log(EZ1_DNA_rel_abun+0.01),
y=log(trizol_DNA_rel_abun+0.01),
)) +
geom_point(aes(color=genus, size=5)) + theme_classic() + stat_cor(method = "pearson") +
stat_smooth( method = "lm") + scale_color_manual(values=c24)
View(mock_comm_mgx_k2_species_filt_cor_df)
k2_files_to_load <- list.files(path="../data/mock_comm_DNA_out",pattern="_k2.s.tsv",full.names=T)
k2_file_ids <- word(string=k2_files_to_load,1,sep="_FKDL")
k2_file_ids <- word(string=k2_file_ids,4,sep="/")
mock_comm_mgx_k2 <- lapply(k2_files_to_load, function(x){
output <- read_tsv(file=x,show_col_types = FALSE,
col_names = c("rel_abun", "paired_reads", "minimizers","distinct_minimizers","species"))
return(output)
})
names(mock_comm_mgx_k2) <- k2_file_ids
#Keep only the species present in the mock communities (roughly)
mock_comm_mgx_k2_species_filt <- lapply(k2_file_ids, function(x){
k2_df <- mock_comm_mgx_k2[[x]]
mock_comm_ident <- mock_comm_DNA_metadata %>% dplyr::filter(LIBID==x) %>% pull(mock_comm_id)
ground_truth_species <- mock_comm_DNA_composition %>%
dplyr::filter(mock_comm_id == mock_comm_ident) %>% pull(species)
#S enterica is S typhi
k2_df_filt <- k2_df %>% dplyr::filter(species %in% c(ground_truth_species))
k2_df_filt$LIBID <- x
return(k2_df_filt)
})
names(mock_comm_mgx_k2_species_filt) <- k2_file_ids
mock_comm_mgx_k2_species_filt_df <- do.call("rbind",mock_comm_mgx_k2_species_filt)
mock_comm_mgx_k2_species_filt_df <- merge(mock_comm_mgx_k2_species_filt_df,
mock_comm_DNA_metadata)
#cor df for plotting. Correlate rel abun from trizol vs rel abun from EZ1
mock_communities_chosen <- unique(mock_comm_mgx_k2_species_filt_df$mock_comm_id)
mock_comm_mgx_k2_species_filt_cor_df <- lapply(mock_communities_chosen, function(x){
#relative abundance for EZ1 extraction
EZ1_df <- mock_comm_mgx_k2_species_filt_df %>%
dplyr::filter(mock_comm_id==x & DNA_extraction_method == "EZ1") %>%
dplyr::select(rel_abun, species) %>%
dplyr::rename(EZ1_DNA_rel_abun=rel_abun)
#relative abundance for trizol extraction
trizol_df <- mock_comm_mgx_k2_species_filt_df %>%
dplyr::filter(mock_comm_id==x & DNA_extraction_method == "trizol") %>%
dplyr::select(rel_abun, species) %>%
dplyr::rename(trizol_DNA_rel_abun=rel_abun)
output_df <- merge(EZ1_df, trizol_df, by = "species")
output_df$mock_comm_id <- x
return(output_df)
}) %>% do.call("rbind",.)
mock_comm_mgx_k2_species_filt_cor_df$genus <- word(string=mock_comm_mgx_k2_species_filt_cor_df$species,
start=1)
#Color code by genus
ggplot(data=mock_comm_mgx_k2_species_filt_cor_df, aes(x=log(EZ1_DNA_rel_abun+0.01),
y=log(trizol_DNA_rel_abun+0.01),
)) +
geom_point(aes(color=genus, size=5)) + theme_classic() + stat_cor(method = "pearson") +
stat_smooth( method = "lm") + scale_color_manual(values=c24)
ggsave("../plots/trizol_vs_EZ1_species_DNA_corr.pdf", plot=last_plot())
View(mock_comm_mgx_k2_species_filt_df)
?log
exp(1)
