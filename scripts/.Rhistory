#Read count for mtx before de-duplication
median(mtx_stats_chosen$AFT_RIBO_RM)
median(mtx_stats_chosen$MICROBE_COUNT)
#read counts for mgx microbial reads
median(mgx_stats_chosen$MICROBE_COUNT)
View(subjects_MGX)
130/135
View(subjects_MTX)
102/135
View(mtx_passed)
View(mtx_stats)
test <- mtx_passed %>% dplyr::filter(comments != "technical replicate analysis")
mtx_non_human_proportion <- mtx_stats_chosen %>%
dplyr::select(subj_region, AFTER_FASTP, AFT_HUMAN_RM)
mtx_non_human_proportion$assay <- "metatranscriptome"
mtx_non_human_proportion$percent_non_human <- (mtx_non_human_proportion$AFT_HUMAN_RM / mtx_non_human_proportion$AFTER_FASTP)*100
mgx_non_human_proportion <- mtx_stats_chosen %>%
dplyr::select(subj_region, AFTER_FASTP, BT2_READS_START)
mgx_non_human_proportion$assay <- "metagenome"
mgx_non_human_proportion$percent_non_human <- (mgx_non_human_proportion$BT2_READS_START / mgx_non_human_proportion$AFTER_FASTP)*100
mtx_mgx_non_human_percent <- rbind(mtx_non_human_proportion %>%
dplyr::select(subj_region, percent_non_human, assay),
mgx_non_human_proportion %>%
dplyr::select(subj_region, percent_non_human, assay))
View(mtx_mgx_non_human_percent)
#
# Interestingly, the proportion of non-human reads was found to be significantly higher in metatranscriptomes versus metagenomes (XX% vs YY%, Wilcoxon signed rank p-value <0.05; Supplementary Figure 1D), underscoring the feasibility of skin metatranscriptomic sequencing."
median(mtx_non_human_proportion$percent_non_human)
ggpaired(mtx_mgx_non_human_percent, x = "assay", y = "percent_non_human",
line.color = "gray", line.size = 0.4,
palette = "jco")+ ylab("% of reads not mapped to hg38") +
stat_compare_means(paired = TRUE, method="wilcox.test")
#
median(mgx_non_human_proportion$percent_non_human) #97.9
0.23*10^9
2.3e+08/300
766666.7
?rarecurve
library(vegan)
?rarecurve
knitr::opts_chunk$set(echo = TRUE)
library(limma)
?removeBatchEffect
2475618 + 406505
1305256 + 317278
devtools::install_github("FrederickHuangLin/ANCOMBC"
)
?ancombc
?ancombc2
?ANCOMBC
?ancombc::
setwd("../Desktop/local_project/manuscript/skin_metatranscriptome/scripts/")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(vegan)
library(ggpubr)
library(DESeq2)
library(ALDEx2) #v1.28.1
library(propr) #version 2.1.2
library(tximport)
metadata <- read_tsv("../metadata/skin_mtx_metadata_fmt.txt", show_col_types = FALSE)
mgx_stats <- read_tsv("../metadata/MGX_QC_stats.txt", show_col_types = FALSE)
mtx_stats <- read_tsv("../metadata/MTX_QC_stats.txt", show_col_types = FALSE)
mgx_stats <- merge(mgx_stats, metadata, by = "LIBID", all.x=TRUE)
mtx_stats <- merge(mtx_stats, metadata, by ="LIBID", all.x=TRUE)
mtx_to_pull <- read_tsv("../metadata/mtx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mgx_to_pull <- read_tsv("../metadata/mgx_to_pull", col_names = FALSE, show_col_types = FALSE) %>% pull(X1)
mtx_stats_chosen <- mtx_stats %>% dplyr::filter(LIBID %in% mtx_to_pull)
mgx_stats_chosen <- mgx_stats %>% dplyr::filter(LIBID %in% mgx_to_pull)
mtx_mgx_stats_chosen <- read_tsv(file="../metadata/mtx_mgx_stats_chosen.tsv", show_col_types = FALSE)
#from the 102
n_sites_df <- plyr::count(mtx_stats_chosen, "region") %>% dplyr::rename(n_libs_total=freq)
##########
#MTX Library IDs per site
mtx_Sc_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Sc") %>% pull(mtx_LIBID)
mtx_Ch_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ch") %>% pull(mtx_LIBID)
mtx_Ac_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Ac") %>% pull(mtx_LIBID)
mtx_Vf_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Vf") %>% pull(mtx_LIBID)
mtx_Tw_ids <- mtx_mgx_stats_chosen %>% dplyr::filter(region=="Tw") %>% pull(mtx_LIBID)
#load custom functions
source("aldex2_wrappers.R")
#Function to extract species specific clr abundances
extract_species_clr <- function(species){
species_clr <- lapply(aldex_clr_values, function(x){
x$mgx_LIBID <- rownames(x)
df_subset <- x[,c("mgx_LIBID",species)]
return(df_subset)
}) %>% do.call("rbind",.)
return(species_clr)
}
#Function to extract species specific k2 read counts
extract_species_k2_counts <- function(species, input_list=rna_k2_minimizer_renorm){
species_k2 <- lapply(input_list, function(x){
df_subset <- x %>% dplyr::filter(k2_taxon == species) %>% dplyr::select(mtx_LIBID, paired_counts)
return(df_subset)
}) %>% do.call("rbind",.)
return(species_k2)
}
#Function to melt the pid matrix after MSA into a df for heatmapping
flattenMatrix <- function(path_to_matrix){
pim <- read_table(path_to_matrix,
skip = 1,
col_names = FALSE,
show_col_types = FALSE) %>%
as.data.frame()
colnames(pim) <- c("peptide_id",pim$X1)
rownames(pim) <- pim$peptide_id
peptide_order <- sort(pim$peptide_id)
pim <- pim %>% dplyr::select(-peptide_id)
##Reorder rows and columns in the mat
pim <- pim[peptide_order, peptide_order]
pim[lower.tri(pim)] <- NA
pim$peptide_id <- rownames(pim)
# Reshape to suit ggplot, remove NAs, and sort the labels
pim_melt <- reshape2::melt(pim,
"peptide_id",
na.rm=TRUE,
value.name="percent_id")
#three s.f
pim_melt$percent_id <- signif(pim_melt$percent_id,
3)
return(pim_melt)
}
#Function to re-position the pairwise comparisons to the upper triangular for nicer triangular heatmaps
reposition_triangular <- function(cov_df, pim_df){
cov_df <- cov_df %>% dplyr::select(c("qseq_name",
"sseq_name",
"qseq_cov",
"sseq_cov"))
cov_df$qseq_cov <-  signif(cov_df$qseq_cov, 3)
cov_df$sseq_cov <-  signif(cov_df$sseq_cov, 3)
#add self comparisons, which would be 100% coverage by definition
peptide_ids <- c(cov_df$qseq_name, cov_df$sseq_name) %>% unique(.)
self_comparisons_df <- data.frame(qseq_name=peptide_ids,
sseq_name=peptide_ids,
qseq_cov=100,
sseq_cov=100)
cov_df <- rbind(cov_df, self_comparisons_df)
cov_df_mirror <- cov_df %>% dplyr::rename(sseqid=qseq_name,
qseqid=sseq_name,
sseq_coverage=qseq_cov,
qseq_coverage=sseq_cov) %>%
dplyr::rename(qseq_name=qseqid,
sseq_name=sseqid,
qseq_cov=qseq_coverage,
sseq_cov=sseq_coverage)
cov_df_fmt <- rbind(cov_df, cov_df_mirror)
#temp key for filtering
cov_df_fmt$comparison <- paste0(cov_df_fmt$qseq_name,"-",cov_df_fmt$sseq_name)
pim_df$comparison <- paste0(pim_df$variable,"-",pim_df$peptide_id)
cov_df_filtered <- cov_df_fmt %>% dplyr::filter(comparison %in% pim_df$comparison)
#in this format: query coverage % (subject coverage %)
#cov_df_filtered$query_and_subj_cov <- paste0(cov_df_filtered$qseq_cov,
#                                             " (",cov_df_filtered$sseq_cov,")")
return(cov_df_filtered %>% dplyr::select(-comparison))
}
transcript_vs_clr_scatterplot <- function(vst_mat, mean_clr, transcript, species){
vst_df <- t(vst_mat) %>% as.data.frame()
vst_df$mtx_LIBID <- rownames(vst_df)
species_mean_clr <- mean_clr %>% dplyr::select(species,"mtx_LIBID")
transcript_and_clr_df <- merge(vst_df,species_mean_clr, by ="mtx_LIBID")
ggscatter(transcript_and_clr_df, x = species,
y = transcript, add = "reg.line") + stat_cor(method="spearman") + theme_classic()
}
rna_k2_minimizer_renorm <- lapply(mtx_to_pull, function(x){
df_out <- read_tsv(file=paste0("../data/k2_species_renorm/RNA/",x,"_k2_renorm.s.tsv"),
show_col_types = FALSE)
return(df_out)
})
names(rna_k2_minimizer_renorm) <- mtx_to_pull
dna_k2_minimizer_renorm <- lapply(mgx_to_pull, function(x){
df_out <- read_tsv(file=paste0("../data/k2_species_renorm/DNA/",x,"_k2_renorm.s.tsv"),
show_col_types = FALSE)
return(df_out)
})
names(dna_k2_minimizer_renorm) <- mgx_to_pull
#Malassezia signal P 6 results
malassezia_secretory <- read_tsv("../data/signalP_out/Malassezia_transcripts_translated_signalP6_prediction_results_secretory_fmt.tsv",
col_names = c("ID", "prediction",
"OTHER","SP", "CS_position", "pangene",
show_col_types=FALSE))
AMP_hmm_results <- read_tsv("../data/anti_bact_hmmer/all_mtx_proteins_anti_microbial_hmmscan_fmt.tsv",
col_names = c("target_name",
"target_accession",
"query_name",
"query_accession",
"full_seq_E_value",
"full_seq_score",
"full_seq_bias",
"best_one_dom_E_value",
"best_one_score",
"best_one_bias",
"exp",
"reg",
"clu" ,
"ov",
"env",
"dom",
"rep",
"inc",
"description_of_target"),
show_col_types = FALSE) %>% dplyr::filter(target_name != "Staphylococcus_sle1")
#phenol soluble modulins
psm_hmm_results <- read_tsv("../data/anti_bact_hmmer/all_mtx_proteins_psm_hmmscan_fmt.tsv",
col_names = c("target_name",
"target_accession",
"query_name",
"query_accession",
"full_seq_E_value",
"full_seq_score",
"full_seq_bias",
"best_one_dom_E_value",
"best_one_score",
"best_one_bias",
"exp",
"reg",
"clu" ,
"ov",
"env",
"dom",
"rep",
"inc",
"description_of_target"),
show_col_types = FALSE)
#auto-inducing peptide (agrD)
agrD_hmm_results <- read_tsv("../data/anti_bact_hmmer/all_mtx_proteins_AIP_hmmscan_fmt.tsv",
col_names = c("target_name",
"target_accession",
"query_name",
"query_accession",
"full_seq_E_value",
"full_seq_score",
"full_seq_bias",
"best_one_dom_E_value",
"best_one_score",
"best_one_bias",
"exp",
"reg",
"clu" ,
"ov",
"env",
"dom",
"rep",
"inc",
"description_of_target"),
show_col_types = FALSE)
#Peroxide pathway (Streptococcus)
perox_hmm_results <- read_tsv("../data/anti_bact_hmmer/all_mtx_proteins_strep_peroxide_hmmscan_fmt.tsv",
col_names = c("target_name",
"target_accession",
"query_name",
"query_accession",
"full_seq_E_value",
"full_seq_score",
"full_seq_bias",
"best_one_dom_E_value",
"best_one_score",
"best_one_bias",
"exp",
"reg",
"clu" ,
"ov",
"env",
"dom",
"rep",
"inc",
"description_of_target"),
show_col_types = FALSE)
#
all_hmm_results <- do.call("rbind", list(AMP_hmm_results,psm_hmm_results,agrD_hmm_results,perox_hmm_results))
all_hmm_results$target_accession_fmt <- gsub(pattern="\\.[0-9]*$", replacement="", all_hmm_results$target_accession)
#Load HMM metadata for sequence and domain cut offs
HMM_metadata <- read_tsv("../metadata/HMM_metadata.tsv", show_col_types = FALSE)
#Add cut off information (filtering away false positive hits)
all_hmm_results <- merge(all_hmm_results, HMM_metadata %>% dplyr::select(-description), by = "target_accession_fmt")
hmm_hits <- all_hmm_results %>% dplyr::filter(full_seq_score >= seq_cutoff & best_one_score >= domain_cutoff )
MTX_signif_hmm_expr_taxa_filt_AM <- read_tsv("../data/MTX_signif_hmm_expr_taxa_filt_AM.tsv")
#Return the library IDs that have no hits
no_hit_ids <- setdiff(mtx_to_pull, unique(MTX_signif_hmm_expr_taxa_filt_AM$LIBID))
#add representative entries for library IDs that have no hits.
no_hit_df <- data.frame(LIBID=no_hit_ids, description_of_target="lacticin 481 family lantibiotic", unpaired_read_count=0)
#summarize the dataframe, then convert it to a "longer form"
hmm_AM_df <- rbind(MTX_signif_hmm_expr_taxa_filt_AM %>% dplyr::select(LIBID, description_of_target, unpaired_read_count), no_hit_df)
hmm_AM_df_summary <- hmm_AM_df %>% group_by(LIBID,description_of_target) %>% summarise(unpaired_read_count_sum=sum(unpaired_read_count))
#https://academic.oup.com/jac/article/71/9/2484/2238319
#Among the noise in the raw reads, the possibility of contamination has to be taken into consideration, such as sequence carryover. SRST2 deals with this by setting an extra threshold of a minimum depth of 5, dealing with the worst part of contamination.
hmm_AM_df_summary$presence <- ifelse(hmm_AM_df_summary$unpaired_read_count_sum >= 5, 1, 0)
hmm_AM_df_wide <- pivot_wider(hmm_AM_df_summary, id_cols=description_of_target,
names_from=LIBID, values_from = presence )
hmm_AM_df_wide[is.na(hmm_AM_df_wide)] <- 0
##
hmm_AM_df_heatmap_input <- melt(hmm_AM_df_wide, value.name="presence") %>% dplyr::rename(LIBID=variable)
##Set the factor levels for LIBID in a sensible manner in this order: Sc, Ch, Ac, Vf, Tw
hmm_AM_df_heatmap_input$LIBID <- factor(hmm_AM_df_heatmap_input$LIBID,
levels=c(mtx_Sc_ids,
mtx_Ch_ids,
mtx_Ac_ids,
mtx_Vf_ids,
mtx_Tw_ids))
##Set the factor levels for the category of AMPs
hmm_AM_df_heatmap_input$description_of_target <- factor(hmm_AM_df_heatmap_input$description_of_target,
levels=rev(c( "halocin C8 precursor-like protein",
"bacteriocin halocin C8-like domain",
"thiazolylpeptide-type bacteriocin precursor",
"thiazolylpeptide-type bacteriocin",
"lactococcin 972 family bacteriocin",
"lacticin 481 family lantibiotic",
"gallidermin/nisin family lantibiotic",
"plantaricin C family lantibiotic",
"class IIb bacteriocin, lactobin A/cerein 7B family",
"salivaricin M family lantibiotic",
"lichenicidin A2 family type 2 lantibiotic",
"alpha-1/alpha-2 family phenol-soluble modulin",
"PSM-delta family phenol-soluble modulin",
"Delta lysin family",
"epsilon family phenol-soluble modulin",
"pyruvate oxidase",
"L-lactate oxidase",
"cyclic lactone autoinducer peptide")))
hmm_AM_df_heatmap_input$presence <- factor(hmm_AM_df_heatmap_input$presence)
hmm_AM_heatmap <- ggplot(data=hmm_AM_df_heatmap_input, aes(x=LIBID, y = description_of_target, fill=presence)) + geom_tile(colour ="white") +
scale_fill_manual(values=c("white","steelblue")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.ticks = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=1)) +
theme(axis.title = element_blank()) +
theme(legend.position="none")
ggsave(plot=hmm_AM_heatmap,
filename = "../plots/hmm_AM_heatmap.pdf",
height = 5, width =10)
hmm_AM_heatmap
MTX_signif_hmm_expr_taxa_filt_AM_lib_count <- MTX_signif_hmm_expr_taxa_filt_AM %>%
dplyr::filter(unpaired_read_count >= 5) %>%
dplyr::select(LIBID, k2_taxon, description_of_target)  %>% unique(.)
MTX_signif_hmm_expr_taxa_filt_AM_lib_count <- plyr::count(MTX_signif_hmm_expr_taxa_filt_AM_lib_count,
vars=c("k2_taxon","description_of_target"))
MTX_signif_hmm_expr_taxa_filt_AM_lib_count <- pivot_wider(MTX_signif_hmm_expr_taxa_filt_AM_lib_count,
id_cols=description_of_target,
names_from=k2_taxon, values_from = freq )
MTX_signif_hmm_expr_taxa_filt_AM_lib_count[is.na(MTX_signif_hmm_expr_taxa_filt_AM_lib_count)] <- 0
##
MTX_signif_hmm_expr_taxa_filt_AM_lib_count <- melt(MTX_signif_hmm_expr_taxa_filt_AM_lib_count, value.name="freq") %>% dplyr::rename(k2_taxon=variable)
MTX_signif_hmm_expr_taxa_filt_AM_lib_count$description_of_target <-
factor(MTX_signif_hmm_expr_taxa_filt_AM_lib_count$description_of_target,
levels=rev(c( "halocin C8 precursor-like protein",
"bacteriocin halocin C8-like domain",
"thiazolylpeptide-type bacteriocin precursor",
"thiazolylpeptide-type bacteriocin",
"lactococcin 972 family bacteriocin",
"lacticin 481 family lantibiotic",
"gallidermin/nisin family lantibiotic",
"plantaricin C family lantibiotic",
"class IIb bacteriocin, lactobin A/cerein 7B family",
"salivaricin M family lantibiotic",
"lichenicidin A2 family type 2 lantibiotic",
"alpha-1/alpha-2 family phenol-soluble modulin",
"PSM-delta family phenol-soluble modulin",
"Delta lysin family",
"epsilon family phenol-soluble modulin",
"pyruvate oxidase",
"L-lactate oxidase",
"cyclic lactone autoinducer peptide")))
hmm_AM_species_heatmap <- ggplot(data=MTX_signif_hmm_expr_taxa_filt_AM_lib_count,
aes(x=k2_taxon, y = description_of_target, fill=freq)) +
geom_tile(colour ="white") + geom_text(aes(label=freq)) +
scale_fill_gradient2(low="white", high="red") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.ticks = element_blank()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=1)) +
theme(axis.title = element_blank())
ggsave(plot=hmm_AM_species_heatmap,
filename = "../plots/hmm_AM_species_heatmap.pdf",
height = 5, width =7)
hmm_AM_species_heatmap
#start with the bacteriocin presence/absence information (based on MTX data)
mtx_mgx_stats_chosen_fmt <- mtx_mgx_stats_chosen %>%
dplyr::select(subj_region, mtx_LIBID, mgx_LIBID, region)
hmm_AM_presence <- merge(hmm_AM_df_heatmap_input %>% dplyr::rename(mtx_LIBID=LIBID),
mtx_mgx_stats_chosen_fmt, by = "mtx_LIBID")
#compute the ratios of a) C acnes/S epidemidis and b) C acnes/S capitis ratios for mgx abundances
targeted_mgx_ratios <- lapply(mgx_to_pull, function(metagenomic_LIBID){
df <- dna_k2_minimizer_renorm[[metagenomic_LIBID]]
if("Staphylococcus_capitis" %in% df$k2_taxon == TRUE){
S_cap_abun <- df %>% dplyr::filter(k2_taxon == "Staphylococcus_capitis") %>% pull(rel_abun)
}else{
S_cap_abun <- 0.01 #zero smoothing by adding 0.01% rel abun for missing taxa
}
if("Staphylococcus_epidermidis" %in% df$k2_taxon == TRUE){
S_epi_abun <- df %>% dplyr::filter(k2_taxon == "Staphylococcus_epidermidis") %>% pull(rel_abun)
}else{
S_epi_abun <- 0.01 #zero smoothing by adding 0.01% rel abun for missing taxa
}
if("Cutibacterium_acnes" %in% df$k2_taxon == TRUE){
C_acnes_abun <- df %>% dplyr::filter(k2_taxon == "Cutibacterium_acnes") %>% pull(rel_abun)
}else{
C_acnes_abun <- 0.01 #zero smoothing by adding 0.01% rel abun for missing taxa
}
#Calculate C. acnes/S. epidermidis ratio
C_acnes_over_S_epi <- C_acnes_abun/S_epi_abun
#Calculate C. acnes/S. capitis ratio
C_acnes_over_S_cap <- C_acnes_abun/S_cap_abun
output <- data.frame("mgx_LIBID"=metagenomic_LIBID,
"C_acnes_to_S_epi_ratio"=C_acnes_over_S_epi,
"C_acnes_to_S_cap_ratio"=C_acnes_over_S_cap
)
return(output)
}) %>% do.call("rbind",.)
View(hmm_AM_presence)
thiopeptide_presence_fmt <- hmm_AM_presence %>%
dplyr::filter(description_of_target=="thiazolylpeptide-type bacteriocin")
thiopeptide_presence_fmt$mtx_presence <- ifelse(thiopeptide_presence_fmt$presence==0, "absent","present")
thiopeptide_presence_fmt$plotting_cat <- paste0(thiopeptide_presence_fmt$region,"_",thiopeptide_presence_fmt$mtx_presence)
thiopeptide_presence_fmt$plotting_cat <- factor(thiopeptide_presence_fmt$plotting_cat,
levels=c("Sc_present","Sc_absent",
"Ch_present","Ch_absent",
"Ac_present", "Ac_absent",
"Vf_present", "Vf_absent",
"Tw_present", "Tw_absent"))
thiopeptide_presence_fmt$plotting_cat_fmt <- gsub(pattern="Sc|Ch", replacement="sebaceous",x = thiopeptide_presence_fmt$plotting_cat)
thiopeptide_presence_fmt$plotting_cat_fmt <- gsub(pattern="Ac|Vf|Tw", replacement="non_sebaceous",x = thiopeptide_presence_fmt$plotting_cat_fmt)
thiopeptide_presence_fmt$plotting_cat_fmt <- factor(thiopeptide_presence_fmt$plotting_cat_fmt,
levels=c("sebaceous_present","sebaceous_absent",
"non_sebaceous_present","non_sebaceous_absent"))
site_comparisons <- list(c("sebaceous_present", "sebaceous_absent"),
c("non_sebaceous_present","non_sebaceous_absent"))
thiopeptide_presence_fmt <- merge(thiopeptide_presence_fmt, targeted_mgx_ratios, by = "mgx_LIBID")
#For the C acne to S epi ratio
thiopeptide_presence_ratio_boxplot_a <- ggplot(thiopeptide_presence_fmt,
aes(x=plotting_cat_fmt, y=log10(C_acnes_to_S_epi_ratio))) +
geom_boxplot() + theme_classic() + stat_compare_means(method="wilcox.test",
comparisons=site_comparisons) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=1))
thiopeptide_presence_ratio_boxplot_a
#For the C acne to S cap ratio
thiopeptide_presence_ratio_boxplot_b <- ggplot(thiopeptide_presence_fmt,
aes(x=plotting_cat_fmt, y=log10(C_acnes_to_S_cap_ratio))) +
geom_boxplot() + theme_classic() + stat_compare_means(method="wilcox.test",
comparisons=site_comparisons) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=1))
thiopeptide_presence_ratio_boxplot_b
thiopeptide_presence_ratio_boxplots <- ggarrange(thiopeptide_presence_ratio_boxplot_a,
thiopeptide_presence_ratio_boxplot_b,
ncol = 2 )
#count of samples in each category
thiopeptide_presence_fmt %>% plyr::count(., vars="plotting_cat_fmt")
AIP_presence_fmt <- hmm_AM_presence %>%
dplyr::filter(description_of_target=="cyclic lactone autoinducer peptide")
AIP_presence_fmt$mtx_presence <- ifelse(AIP_presence_fmt$presence==0, "absent","present")
AIP_presence_fmt$plotting_cat <- paste0(AIP_presence_fmt$region,"_",AIP_presence_fmt$mtx_presence)
AIP_presence_fmt$plotting_cat <- factor(AIP_presence_fmt$plotting_cat,
levels=c("Sc_present","Sc_absent",
"Ch_present","Ch_absent",
"Ac_present", "Ac_absent",
"Vf_present", "Vf_absent",
"Tw_present", "Tw_absent"))
AIP_presence_fmt$plotting_cat_fmt <- gsub(pattern="Sc|Ch", replacement="sebaceous",x = AIP_presence_fmt$plotting_cat)
AIP_presence_fmt$plotting_cat_fmt <- gsub(pattern="Ac|Vf|Tw", replacement="non_sebaceous",x = AIP_presence_fmt$plotting_cat_fmt)
AIP_presence_fmt$plotting_cat_fmt <- factor(AIP_presence_fmt$plotting_cat_fmt,
levels=c("sebaceous_present","sebaceous_absent",
"non_sebaceous_present","non_sebaceous_absent"))
site_comparisons <- list(c("sebaceous_present", "sebaceous_absent"),
c("non_sebaceous_present","non_sebaceous_absent"))
AIP_presence_fmt <- merge(AIP_presence_fmt, targeted_mgx_ratios, by = "mgx_LIBID")
#For the C acne to S epi ratio
AIP_presence_ratio_boxplot_a <- ggplot(AIP_presence_fmt,
aes(x=plotting_cat_fmt, y=log10(C_acnes_to_S_epi_ratio))) +
geom_boxplot() + theme_classic() + stat_compare_means(method="wilcox.test",
comparisons=site_comparisons) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=1))
AIP_presence_ratio_boxplot_a
#For the C acne to S cap ratio
AIP_presence_ratio_boxplot_b <- ggplot(AIP_presence_fmt,
aes(x=plotting_cat_fmt, y=log10(C_acnes_to_S_cap_ratio))) +
geom_boxplot() + theme_classic() + stat_compare_means(method="wilcox.test",
comparisons=site_comparisons) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=1))
AIP_presence_ratio_boxplot_b
#
AIP_presence_ratio_boxplots <- ggarrange(AIP_presence_ratio_boxplot_a,
AIP_presence_ratio_boxplot_b,
ncol = 2 )
ggsave(plot=AIP_presence_ratio_boxplots,
filename = "../plots/AIP_presence_ratio_boxplots.pdf",
height = 5, width =7)
#count of samples in each category
AIP_presence_fmt %>% plyr::count(., vars="plotting_cat_fmt")
AIP_presence_ratio_boxplots
View(AIP_presence_fmt)
#Median RNA read count for AIPs for "present" samples.
AIP_presence_LIBIDs <- AIP_presence_fmt %>% dplyr::filter(mtx_presence == "present") %>% pull(mtx_LIBID)
AIP_presence_LIBIDs
View(MTX_signif_hmm_expr_taxa_filt_AM)
MTX_signif_hmm_expr_taxa_filt_AM %>%
dplyr::filter(description_of_target=="cyclic lactone autoinducer peptide") %>%
dplyr::filter(LIBID %in% AIP_presence_LIBIDs) %>%
pull(unpaired_read_count) %>%
median(.)
#Median RNA read count for thiopeptides for "present" samples.
thiopeptide_presence_LIBIDs <- thiopeptide_presence_fmt %>% dplyr::filter(mtx_presence == "present") %>% pull(mtx_LIBID)
MTX_signif_hmm_expr_taxa_filt_AM %>%
dplyr::filter(description_of_target=="thiazolylpeptide-type bacteriocin") %>%
dplyr::filter(LIBID %in% thiopeptide_presence_LIBIDs) %>%
pull(unpaired_read_count) %>%
median(.)
MTX_signif_hmm_expr_taxa_filt_AM %>%
dplyr::filter(description_of_target=="thiazolylpeptide-type bacteriocin") %>%
dplyr::filter(LIBID %in% thiopeptide_presence_LIBIDs) %>%
pull(unpaired_read_count) %>%
max(.)
