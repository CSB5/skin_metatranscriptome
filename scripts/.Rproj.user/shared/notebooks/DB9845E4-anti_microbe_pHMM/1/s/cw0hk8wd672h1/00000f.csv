"0","#Load results"
"0",""
"0","MTX_signif_hmm_expr_taxa <- read_tsv(""../processed/signif_mtx_hmmsearch_IDs_expr_taxa.txt"","
"0","                                             col_names = c(""LIBID"",""unpaired_read_count"",""pangene"",""k2_taxon"",""Uniref90_ID""))"
"1","[1mRows: [22m[34m1869[39m [1mColumns: [22m[34m5[39m
"
"1","[36mâ”€â”€[39m [1mColumn specification[22m [36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[39m
[1mDelimiter:[22m ""\t""
[31mchr[39m (4): LIBID, pangene, k2_taxon, Uniref90_ID
[32mdbl[39m (1): unpaired_read_count
"
"1","
[36mâ„¹[39m Use `spec()` to retrieve the full column specification for this data.
[36mâ„¹[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.
"
"0","MTX_signif_hmm_expr_taxa$query_name <- ifelse(MTX_signif_hmm_expr_taxa$pangene != ""-"","
"0","                                              MTX_signif_hmm_expr_taxa$pangene,"
"0","                                              MTX_signif_hmm_expr_taxa$Uniref90_ID)"
"0",""
"0",""
"0","#Process hits such that they account for false positives and contaminants"
"0",""
"0","filter_hmm_results <- function(input_df=MTX_signif_hmm_expr_taxa, library_ids=mtx_to_pull){"
"0","  "
"0","  input_list <- split(input_df, f=input_df$LIBID)"
"0","  "
"0","  #https://stackoverflow.com/questions/33004238/removing-null-elements-from-a-list"
"0","  input_list <- input_list[library_ids] %>% discard(is.null)"
"0","  "
"0","  #account for taxa false positives"
"0","  #Only a hit if the genus or species is consistent with the filtered k2 results"
"0","  "
"0","  ids_to_iterate <- names(input_list)"
"0","  "
"0","  output_list <- lapply(ids_to_iterate, function(x){"
"0","    "
"0","    #include genus and species"
"0","    taxa_hits <- c(rna_k2_minimizer_renorm[[x]]$k2_taxon, "
"0","                   word(rna_k2_minimizer_renorm[[x]]$k2_taxon,1,1,sep=""_"")) %>% unique(.)"
"0","    "
"0","    feature_hits <- c(mtx_panalign_results[[x]]$pangene, mtx_uniref90_results[[x]]$uniref90_ID) %>% unique(.)"
"0","    "
"0","    df_taxa_filtered <- input_list[[x]] %>% "
"0","      dplyr::filter(k2_taxon %in% taxa_hits & query_name %in% feature_hits )"
"0","    "
"0","    return(df_taxa_filtered)"
"0","    })"
"0","  "
"0","  return(output_list)"
"0","}"
"0",""
"0","MTX_signif_hmm_expr_taxa_filt <- filter_hmm_results() %>% do.call(""rbind"",.)"
"0",""
"0",""
"0",""
"0","#Add hmm annotations"
"0","MTX_signif_hmm_expr_taxa_filt <- merge(MTX_signif_hmm_expr_taxa_filt, hmm_hits %>% dplyr::select(query_name, description_of_target))"
"0",""
"0","MTX_signif_hmm_expr_taxa_filt$description_of_target <- gsub(pattern=""JCVI: "", replacement="""","
"0","                                                       MTX_signif_hmm_expr_taxa_filt$description_of_target)"
"0",""
"0","MTX_signif_hmm_expr_taxa_filt$description_of_target <- gsub(pattern=""NCBIFAM: "", replacement="""","
"0","                                                       MTX_signif_hmm_expr_taxa_filt$description_of_target)"
"0",""
"0","#Add metadata"
"0",""
"0","MTX_signif_hmm_expr_taxa_filt_AM <- merge(MTX_signif_hmm_expr_taxa_filt, metadata %>% dplyr::select(LIBID,region))"
"0",""
"0",""
"0","#MTX_signif_hmm_expr_taxa_filt_AM <- MTX_signif_hmm_expr_taxa_filt %>% "
"0","  #dplyr::filter(description_of_target != ""alpha-1/alpha-2 family phenol-soluble modulin"")"
"0",""
