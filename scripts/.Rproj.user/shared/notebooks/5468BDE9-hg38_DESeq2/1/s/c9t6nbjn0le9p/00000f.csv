"0",""
"0","##modify the plotPCA function"
"0",""
"0","plotPCA_custom.DESeqTransform = function(object, intgroup=""condition"", ntop=500, returnData=FALSE)"
"0","{"
"0","  # calculate the variance for each gene"
"0","  rv <- rowVars(assay(object))"
"0",""
"0","  # select the ntop genes by variance"
"0","  select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]"
"0",""
"0","  # perform a PCA on the data in assay(x) for the selected genes"
"0","  pca <- prcomp(t(assay(object)[select,]))"
"0",""
"0","  # the contribution to the total variance for each component"
"0","  percentVar <- pca$sdev^2 / sum( pca$sdev^2 )"
"0",""
"0","  if (!all(intgroup %in% names(colData(object)))) {"
"0","    stop(""the argument 'intgroup' should specify columns of colData(dds)"")"
"0","  }"
"0",""
"0","  intgroup.df <- as.data.frame(colData(object)[, intgroup, drop=FALSE])"
"0","  "
"0","  # add the intgroup factors together to create a new grouping factor"
"0","  group <- if (length(intgroup) > 1) {"
"0","    factor(apply( intgroup.df, 1, paste, collapse="":""))"
"0","  } else {"
"0","    colData(object)[[intgroup]]"
"0","  }"
"0",""
"0","  # assembly the data for the plot"
"0","  d <- data.frame(PC1=pca$x[,1], PC2=pca$x[,2], group=group, intgroup.df, name=colnames(object))"
"0",""
"0","  if (returnData) {"
"0","    attr(d, ""percentVar"") <- percentVar[1:2]"
"0","    return(d)"
"0","  }"
"0","  "
"0","  ggplot(data=d, aes_string(x=""PC1"", y=""PC2"", color=""group"")) + geom_point(size=5) + "
"0","    xlab(paste0(""PC1: "",round(percentVar[1] * 100),""% variance"")) +"
"0","      ylab(paste0(""PC2: "",round(percentVar[2] * 100),""% variance"")) +"
"0","        coord_fixed() + theme_classic()"
"0","}"
"0",""
"0","setMethod(""plotPCA"", signature(object=""DESeqTransform""), plotPCA_custom.DESeqTransform)"
"0",""
"0",""
