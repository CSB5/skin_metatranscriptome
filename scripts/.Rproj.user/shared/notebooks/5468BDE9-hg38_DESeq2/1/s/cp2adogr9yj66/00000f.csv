"0",""
"0","#add dv200"
"0",""
"0","main_cohort_hg38_QC <- merge(main_cohort_hg38_QC, mtx_stats_chosen %>% dplyr::select(LIBID, subject, DV200))"
"0",""
"0","main_cohort_hg38_QC$DV200 <- as.numeric(main_cohort_hg38_QC$DV200)"
"0",""
"0","get_vst_data <- function(count_matrix=main_cohort_hg38_count_matrix, QC_metadata=main_cohort_hg38_QC, skin_site){"
"0","  "
"0","  #Convert to matrix of integers from salmon count outputs"
"0","  hg38_count_matrix <- round(count_matrix)"
"0","  mode(hg38_count_matrix) <- ""integer"""
"0","  "
"0","  hg38_DESeq_metadata <- QC_metadata %>% "
"0","    dplyr::select(LIBID, subject, region, approx_giga_nt, DV200) %>% "
"0","    as.data.frame() %>% dplyr::filter(region %in% skin_site)"
"0","  "
"0","  rownames(hg38_DESeq_metadata) <- hg38_DESeq_metadata$LIBID"
"0","  "
"0","  hg38_DESeq_metadata <- hg38_DESeq_metadata %>% dplyr::select(-LIBID)"
"0","  "
"0","  hg38_DESeq_metadata$subject <- as.factor(hg38_DESeq_metadata$subject)"
"0","  "
"0","  hg38_DESeq_metadata$region <- as.factor(hg38_DESeq_metadata$region)"
"0","  "
"0","  #subset the count matrix"
"0","  "
"0","  hg38_count_matrix <- hg38_count_matrix[,rownames(hg38_DESeq_metadata)]"
"0","  "
"0","  #the row names of metadata should automatically be ordered in a way that matches the input matrix"
"0","  #reorder rows of the metadata"
"0","  "
"0","  hg38_idx <- match(colnames(hg38_count_matrix), rownames(hg38_DESeq_metadata))"
"0","  hg38_DESeq_metadata <- hg38_DESeq_metadata[hg38_idx,]"
"0","  "
"0","  #https://support.bioconductor.org/p/79209/"
"0","  #The design of ~1 is to allow for the functions to run for technical reasons (this design is used under some settings for estimating the transformations for example). This is not testing for any differential expression"
"0","  hg38_dds <- DESeqDataSetFromMatrix(countData = hg38_count_matrix, "
"0","                                colData = hg38_DESeq_metadata, "
"0","                                design = ~1)"
"0","  "
"0","  hg38_mat <- counts(hg38_dds)"
"0","  "
"0","  hg38_keep <- (rowMedians(hg38_mat) >= 10)"
"0","  "
"0","  hg38_dds <- hg38_dds[hg38_keep,]"
"0","  "
"0","  #####Estimate size factors#"
"0","  #If in normal RNA-seq there is at least one zero per gene that means that (I guess) either samples are notably under-sequenced or there are any other kinds of dropout events that I'd investigate. it is in any case not normal and should probably not be ignored by just adding a pseudocount. "
"0","  #One way to handle it is to use poscounts"
"0","  "
"0","  #The ""poscounts"" estimator deals with a gene with some zeros, by calculating a modified geometric mean by taking the n-th root of the"
"0","  #product of the non-zero counts. This evolved out of use cases with Paul McMurdie's phyloseq package for metagenomic samples"
"0","  "
"0","  hg38_dds <- estimateSizeFactors(hg38_dds, type = ""poscounts"")"
"0","  "
"0","  hg38_normalized_counts <- counts(hg38_dds, normalized=TRUE)"
"0","  "
"0","  #Note:https://support.bioconductor.org/p/98634/"
"0","  #See DESeq2 vignette about blind dispersion estimation"
"0","  "
"0","  #blind=TRUE should be used for comparing samples in a manner unbiased by prior information on samples, for example to perform sample QA (quality assurance). blind=FALSE should be used for transforming data for downstream analysis, where the full use of the design information should be made."
"0","  "
"0","  "
"0","  #May have to manually define nsub here because there are fewer than the default 1000 features for vst"
"0","  #hg38_vsd <- vst(hg38_dds, blind=TRUE, nsub=sum( rowMedians( counts(hg38_dds, normalized=TRUE)) >= 10 ) ) "
"0","  "
"0","  hg38_vsd <- vst(hg38_dds, blind=TRUE) "
"0","  hg38_vsd_mat <- assay(hg38_vsd)"
"0","  hg38_vsd_cor <- cor(hg38_vsd_mat)"
"0",""
"0","  output <- tibble::lst(hg38_count_matrix, hg38_DESeq_metadata,"
"0","                        hg38_vsd,hg38_vsd_mat,hg38_vsd_cor)"
"0","  "
"0","  return(output)"
"0","  "
"0","}"
"0",""
"0",""
"0","Sc_main_cohort_hg38_vst <- get_vst_data(skin_site = ""Sc"")"
"0",""
"0",""
"0",""
"0","#I guess…pca and color by dv200 or giga nucleotide haha.. If it doesn’t show up in the first few PCs then ignore"
"0",""
"0","plotPCA(Sc_main_cohort_hg38_vst$hg38_vsd, intgroup = ""DV200"", returnData=FALSE) + "
"0","  theme_classic() + scale_color_continuous(type = ""viridis"") + ggtitle(""Colored by DV200"")"
