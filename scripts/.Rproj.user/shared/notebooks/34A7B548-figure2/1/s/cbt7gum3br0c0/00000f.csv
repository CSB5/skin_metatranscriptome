"0",""
"0","#Shortlist modules that are ""core"": non-zero in >75% of individuals in each skin site. "
"0",""
"0","mtx_pathcounts_core <- mtx_pathcounts %>% dplyr::filter(detection_percent > 75)"
"0",""
"0","# Now we need to find pathways that are ""largely explained"" at species level"
"0",""
"0","mtx_pathabun_stratified<- mtx_pathabun_CPM_df %>% "
"0","  dplyr::filter(str_detect(string=.$module,  pattern=""g__|unclassified"")) %>% "
"0","  dplyr::filter(str_detect(string=.$module,  pattern=""UNINTEGRATED"", negate = TRUE)) %>% dplyr::rename(module_taxonomy=module) %>% "
"0","  separate(., col = module_taxonomy, into = c(""module"", NA), sep = ""\\|"", remove=FALSE)"
"0",""
"0","#Get relative abundance of ""unclassified"" contributing to each pathway in each library"
"0",""
"0","#First find the sum of CoPMs (including unclassified) for each pathway in each library"
"0","#This is NOT THE SAME as the unstratified pathway counts in mtx_pathabun_whole_comm"
"0",""
"0","mtx_pathabun_stratified_sum_per_lib <- mtx_pathabun_stratified %>% "
"0","  group_by(module,LIBID) %>% summarise(CoPM_sum=sum(CoPM)) %>% ungroup()"
"1","[38;5;232m`summarise()` has grouped output by 'module'. You can override using the `.groups` argument.[39m
"
"0","#Next find the contributions of unclassfied for each pathway, stratified at species level in each library"
"0","mtx_path_abun_unclassified <- mtx_pathabun_stratified %>% "
"0","  dplyr::filter(str_detect(string=.$module_taxonomy,  pattern=""\\|unclassified"")) %>% "
"0","  dplyr::rename(CoPM_unclassified=CoPM)"
"0",""
"0",""
"0","mtx_pathabun_stratified_sum_per_lib <- merge(mtx_pathabun_stratified_sum_per_lib, "
"0","                                 mtx_path_abun_unclassified %>% "
"0","                                   dplyr::select(LIBID, module, CoPM_unclassified),"
"0","                                 by=c(""LIBID"",""module""), all.x = TRUE)"
"0",""
"0",""
"0","mtx_pathabun_stratified_sum_per_lib$CoPM_unclassified <- ifelse(is.na(mtx_pathabun_stratified_sum_per_lib$CoPM_unclassified),"
"0","                                                                0,"
"0","                                                    mtx_pathabun_stratified_sum_per_lib$CoPM_unclassified)"
"0",""
"0",""
"0","mtx_pathabun_stratified_sum_per_lib$module_unclassified_pcnt <- (mtx_pathabun_stratified_sum_per_lib$CoPM_unclassified/mtx_pathabun_stratified_sum_per_lib$CoPM_sum)*100"
"0",""
"0","#Add site metadata "
"0","mtx_pathabun_stratified_sum_per_lib <- merge(mtx_pathabun_stratified_sum_per_lib, "
"0","                                             metadata %>% dplyr::select(LIBID,region), by = ""LIBID"")"
"0",""
"0",""
"0","#Extract those pathways with a non-trivial proportion of “unclassified” (>=25%) and count the frequency per site"
"0","mtx_unclassified_path_region_count <- mtx_pathabun_stratified_sum_per_lib %>% "
"0","  dplyr::filter(module_unclassified_pcnt >= 25) %>% plyr::count(., c(""module"",""region"")) %>% "
"0","  dplyr::rename(high_unclassified_freq_per_site=freq)"
"0",""
"0","mtx_unclassified_path_region_count <- merge(mtx_unclassified_path_region_count, region_lib_count,"
"0","                                            by=""region"")"
"0","#Proportion of pathways with a non-trivial proportion of “unclassified” (>25%) in a non-trivial fraction of samples (>25%)"
"0","mtx_unclassified_path_region_count$high_unclassified_pcnt_per_site <- (mtx_unclassified_path_region_count$high_unclassified_freq_per_site/mtx_unclassified_path_region_count$n_samples)*100"
"0",""
"0","#Pathways to exclude per site (due to high unclassified representation)"
"0","mtx_path_to_exclude <- mtx_unclassified_path_region_count %>% dplyr::filter(high_unclassified_pcnt_per_site > 25)"
"0","mtx_path_to_exclude$to_exclude <- TRUE"
"0",""
"0","mtx_pathcounts_core <- merge(mtx_pathcounts_core, "
"0","                             mtx_path_to_exclude %>% dplyr::select(region, module, to_exclude), "
"0","                             by = c(""region"",""module""), all.x = TRUE)"
"0",""
"0","mtx_pathcounts_core$to_exclude <- ifelse(is.na(mtx_pathcounts_core$to_exclude),"
"0","                                         FALSE,TRUE)"
"0",""
"0","mtx_pathcounts_core_filt <- mtx_pathcounts_core %>% dplyr::filter(to_exclude==FALSE)"
"0",""
