"0",""
"0",""
"0","rna_kraken_tech_rep <- lapply(tech_reps, function(x) {"
"0","  "
"0","  df <- read_tsv(paste0(""../data/kraken2/minimizer_df/RNA/"",x,""_merged_decont_k2.s.tsv""),"
"0","                    col_names = c(""rel_abun"",""paired_counts"",""minimizer_count"",""distinct_minimizer_count"",""k2_taxon""), show_col_types = FALSE) %>% "
"0","    dplyr::select(-c(""rel_abun"",""minimizer_count"")) %>% "
"0","    dplyr::filter(!k2_taxon %in% c(""unclassified"",""Homo sapiens""))"
"0","  "
"0","  df$k2_taxon <- gsub(pattern="" "", replacement=""_"", df$k2_taxon)"
"0","  "
"0","  #label the non-contaminant, non spike in, non human reads at species level"
"0","  "
"0","  #label source as ""non-contaminant"", ""contaminant"", ""spike"". Note that ""Listeria, Plesiomonas and Vibrio"" are the spikes"
"0","  df_bio  <- df %>% dplyr::filter(str_detect(df$k2_taxon, genera_mask, negate=TRUE)) %>% "
"0","    dplyr::filter(! k2_taxon %in% species_to_remove)"
"0","  "
"0","  df_bio$source <- ""non_contaminant"""
"0","  "
"0","  df_contam <- df %>% "
"0","    dplyr::filter(str_detect(df$k2_taxon, genera_mask) | k2_taxon %in% species_to_remove)"
"0","  "
"0","  df_contam$source <- ifelse(str_detect(df_contam$k2_taxon, ""^Listeria|^Plesiomonas|^Vibrio""), ""spike"", ""contaminant"")"
"0","  "
"0","  #Set relative abundance of contaminants and spike ins to zero"
"0","  df_contam$rel_abun <- 0"
"0","  "
"0","  #Compute relative abundance at species level for for non-contaminants and non-spikes"
"0","  #expressed as percentage abundance"
"0","  df_bio$rel_abun <- (df_bio$paired_counts / sum(df_bio$paired_counts))*100"
"0",""
"0","  df_labelled <- rbind(df_bio, df_contam)"
"0","  "
"0","  #rel abundance >= 0.1% for a non contaminant, non spike in."
"0","  df_labelled$abun_filter <- ifelse(df_labelled$rel_abun >= 0.1, TRUE, FALSE)  "
"0"," "
"0","  #library specific minimizer threshold    "
"0","  #Count the number of non-contaminant, non_spike in microbial read pairs at SPECIES LEVEL"
"0","  microbial_reads <- sum(df_bio$paired_counts) "
"0","  microbial_reads_per_million <- microbial_reads/1E6"
"0","  "
"0","  minimizer_threshold <- 10000*microbial_reads_per_million"
"0","  "
"0","  df_labelled$species_microbial_read_pair_total <- microbial_reads  "
"0","  df_labelled$minimizer_threshold <- minimizer_threshold"
"0","  "
"0","  #distinct minimizer to PER MILLION microbial read pair (non contaminant, non spike in, microbe reads at species level) ratio"
"0","  df_labelled$minimizer_microbe_ratio <- df_labelled$distinct_minimizer_count / microbial_reads_per_million"
"0","  "
"0","  #for clarity purposes, set contaminant and spike in values to 0"
"0","  df_labelled$minimizer_microbe_ratio <- ifelse(df_labelled$source == ""non_contaminant"","
"0","                                                df_labelled$minimizer_microbe_ratio, 0)"
"0","  "
"0","  "
"0","  df_labelled$minimizer_filter <- ifelse(df_labelled$distinct_minimizer_count >= minimizer_threshold,TRUE, FALSE)"
"0","  "
"0","  #taxa_pass_filter based on the two criteria stated:"
"0","  "
"0","  #a) at least 10000 unique k-mers per 1 million microbial reads AND"
"0","  #b) at least >= 0.1% relative abundance amongst non contaminant, non spike in, microbe reads at species level"
"0","  "
"0","  df_labelled$taxa_pass_filter <- ifelse(df_labelled$minimizer_filter ==TRUE &"
"0","                                           df_labelled$abun_filter ==TRUE, TRUE,FALSE)"
"0","  df_labelled$mtx_LIBID <- x"
"0","  "
"0","  return(df_labelled)"
"0","  "
"0","})"
"0",""
"0","names(rna_kraken_tech_rep) <- tech_reps"
"0",""
"0",""
"0",""
"0","rna_kraken_longitudinal <- lapply(longitudinal_metadata_passed$LIBID, function(x) {"
"0","  "
"0","  df <- read_tsv(paste0(""../data/HN00205433/kraken2_out/"",x,""_k2.s.tsv""),"
"0","                    col_names = c(""rel_abun"",""paired_counts"",""minimizer_count"",""distinct_minimizer_count"",""k2_taxon""), show_col_types = FALSE) %>% "
"0","    dplyr::select(-c(""rel_abun"",""minimizer_count"")) %>% "
"0","    dplyr::filter(!k2_taxon %in% c(""unclassified"",""Homo sapiens""))"
"0","  "
"0","  df$k2_taxon <- gsub(pattern="" "", replacement=""_"", df$k2_taxon)"
"0","  "
"0","  #label the non-contaminant, non spike in, non human reads at species level"
"0","  "
"0","  #label source as ""non-contaminant"", ""contaminant"", ""spike"". Note that ""Listeria, Plesiomonas and Vibrio"" are the spikes"
"0","  df_bio  <- df %>% dplyr::filter(str_detect(df$k2_taxon, genera_mask, negate=TRUE)) %>% "
"0","    dplyr::filter(! k2_taxon %in% species_to_remove)"
"0","  "
"0","  df_bio$source <- ""non_contaminant"""
"0","  "
"0","  df_contam <- df %>% "
"0","    dplyr::filter(str_detect(df$k2_taxon, genera_mask) | k2_taxon %in% species_to_remove)"
"0","  "
"0","  df_contam$source <- ifelse(str_detect(df_contam$k2_taxon, ""^Listeria|^Plesiomonas|^Vibrio""), ""spike"", ""contaminant"")"
"0","  "
"0","  #Set relative abundance of contaminants and spike ins to zero"
"0","  df_contam$rel_abun <- 0"
"0","  "
"0","  #Compute relative abundance at species level for for non-contaminants and non-spikes"
"0","  #expressed as percentage abundance"
"0","  df_bio$rel_abun <- (df_bio$paired_counts / sum(df_bio$paired_counts))*100"
"0",""
"0","  df_labelled <- rbind(df_bio, df_contam)"
"0","  "
"0","  #rel abundance >= 0.1% for a non contaminant, non spike in."
"0","  df_labelled$abun_filter <- ifelse(df_labelled$rel_abun >= 0.1, TRUE, FALSE)  "
"0"," "
"0","  #library specific minimizer threshold    "
"0","  #Count the number of non-contaminant, non_spike in microbial read pairs at SPECIES LEVEL"
"0","  microbial_reads <- sum(df_bio$paired_counts) "
"0","  microbial_reads_per_million <- microbial_reads/1E6"
"0","  "
"0","  minimizer_threshold <- 10000*microbial_reads_per_million"
"0","  "
"0","  df_labelled$species_microbial_read_pair_total <- microbial_reads  "
"0","  df_labelled$minimizer_threshold <- minimizer_threshold"
"0","  "
"0","  #distinct minimizer to PER MILLION microbial read pair (non contaminant, non spike in, microbe reads at species level) ratio"
"0","  df_labelled$minimizer_microbe_ratio <- df_labelled$distinct_minimizer_count / microbial_reads_per_million"
"0","  "
"0","  #for clarity purposes, set contaminant and spike in values to 0"
"0","  df_labelled$minimizer_microbe_ratio <- ifelse(df_labelled$source == ""non_contaminant"","
"0","                                                df_labelled$minimizer_microbe_ratio, 0)"
"0","  "
"0","  "
"0","  df_labelled$minimizer_filter <- ifelse(df_labelled$distinct_minimizer_count >= minimizer_threshold,TRUE, FALSE)"
"0","  "
"0","  #taxa_pass_filter based on the two criteria stated:"
"0","  "
"0","  #a) at least 10000 unique k-mers per 1 million microbial reads AND"
"0","  #b) at least >= 0.1% relative abundance amongst non contaminant, non spike in, microbe reads at species level"
"0","  "
"0","  df_labelled$taxa_pass_filter <- ifelse(df_labelled$minimizer_filter ==TRUE &"
"0","                                           df_labelled$abun_filter ==TRUE, TRUE,FALSE)"
"0","  df_labelled$mtx_LIBID <- x"
"0","  "
"0","  return(df_labelled)"
"0","  "
"0","})"
"0",""
"0",""
"0","names(rna_kraken_longitudinal) <- longitudinal_metadata_passed$LIBID"
"0",""
"0",""
"0","#filter artifacts and re-normalize TSS abundances"
"0",""
"0","rna_kraken_tech_rep_renorm <- lapply(names(rna_kraken_tech_rep), function(x){"
"0","  "
"0","  #True positive"
"0","  df_TP <- rna_kraken_tech_rep[[x]] %>% "
"0","    dplyr::filter(taxa_pass_filter==TRUE)"
"0","  "
"0","  #Compute relative abundance at species level expressed as percentage abundance"
"0","  df_TP$rel_abun <- (df_TP$paired_counts / sum(df_TP$paired_counts))*100"
"0","  "
"0","  return(df_TP)"
"0","  "
"0","})"
"0",""
"0","names(rna_kraken_tech_rep_renorm ) <- names(rna_kraken_tech_rep)"
"0",""
"0",""
"0","#"
"0",""
"0",""
"0","rna_kraken_longitudinal_renorm <- lapply(names(rna_kraken_longitudinal), function(x){"
"0","  "
"0","  #True positive"
"0","  df_TP <- rna_kraken_longitudinal[[x]] %>% "
"0","    dplyr::filter(taxa_pass_filter==TRUE)"
"0","  "
"0","  #Compute relative abundance at species level expressed as percentage abundance"
"0","  df_TP$rel_abun <- (df_TP$paired_counts / sum(df_TP$paired_counts))*100"
"0","  "
"0","  return(df_TP)"
"0","  "
"0","})"
"0",""
"0","names(rna_kraken_longitudinal_renorm ) <- names(rna_kraken_longitudinal)"
"0",""
"0",""
"0",""
"0",""
