"0",""
"0","longitudinal_OG_counts <- lapply(longitudinal_metadata_passed$LIBID, function(x){"
"0","  "
"0","  ################"
"0","  ##For bacteria##"
"0","  ################"
"0","    bact_ogs <- longitudinal_mtx_pangene_features[[x]] %>% dplyr::filter(emapper_OG != ""-"") %>% "
"0","  dplyr::filter(str_detect(string=.$emapper_OG, pattern=""Bacteria""))"
"0","#If there are multiple OGs belonging to bacteria, then this function just takes the more specific/narrower (right-most) term that is still ""Bacteria""."
"0","  bact_ogs$bacteria_OG <- gsub(pattern = ""(.*,)(.*)(@2\\|Bacteria.*)"", replacement = ""\\2"",bact_ogs$emapper_OG)"
"0",""
"0","#Extract bacteria OGs from translated search (ts) results"
"0","  bact_ts_ogs <- longitudinal_mtx_uniref90_features[[x]] %>% dplyr::filter(emapper_max_annot_OG != ""-"") %>% "
"0","  dplyr::filter(str_detect(string=.$emapper_OG, pattern=""Bacteria""))"
"0",""
"0","  bact_ts_ogs$bacteria_OG <- gsub(pattern = ""(.*,)(.*)(@2\\|Bacteria.*)"", replacement = ""\\2"",bact_ts_ogs$emapper_OG)"
"0",""
"0","#combine them"
"0",""
"0","  bact_ogs_combined <- rbind(bact_ogs %>% dplyr::select(bacteria_OG , unpaired_read_count, RPK), "
"0","                           bact_ts_ogs %>% dplyr::select(bacteria_OG , unpaired_read_count, RPK))"
"0",""
"0","#summarize counts and RPK"
"0",""
"0","  bact_ogs_counts <- bact_ogs_combined %>%"
"0","  group_by(bacteria_OG) %>% summarise(read_count_sum=sum(unpaired_read_count), RPK_sum = sum(RPK))"
"0","  "
"0","  bact_ogs_counts$LIBID <- x"
"0","  "
"0","  bact_ogs_counts$feature_class <- ""bacteria_OG"""
"0","  "
"0","  bact_ogs_counts$bacteria_OG <- paste0(bact_ogs_counts$bacteria_OG,""|Bacteria"")"
"0","  "
"0","  bact_ogs_counts <- bact_ogs_counts %>% dplyr::rename(OG=bacteria_OG)"
"0","  "
"0","  ################"
"0","  ##  For Fungi ##"
"0","  ################"
"0","  "
"0","    fungi_ogs <- longitudinal_mtx_pangene_features[[x]] %>% dplyr::filter(emapper_OG != ""-"") %>% "
"0","  dplyr::filter(str_detect(string=.$emapper_OG, pattern=""Fungi""))"
"0",""
"0","  #If there are multiple OGs belonging to Fungi, then this function just takes the more specific/narrower (right-most) term that is still ""Fungi""."
"0","  fungi_ogs$fungi_OG <- gsub(pattern = ""(.*,)(.*)(@4751\\|Fungi.*)"", replacement = ""\\2"",fungi_ogs$emapper_OG)"
"0",""
"0","  #Extract fungi OGs from translated search (ts) results"
"0","  fungi_ts_ogs <- longitudinal_mtx_uniref90_features[[x]] %>% dplyr::filter(emapper_max_annot_OG != ""-"") %>% "
"0","  dplyr::filter(str_detect(string=.$emapper_OG, pattern=""Fungi""))"
"0",""
"0","  fungi_ts_ogs$fungi_OG <- gsub(pattern = ""(.*,)(.*)(@4751\\|Fungi.*)"", replacement = ""\\2"",fungi_ts_ogs$emapper_OG)"
"0",""
"0","  #combine them"
"0",""
"0","  fungi_ogs_combined <- rbind(fungi_ogs %>% dplyr::select(fungi_OG , unpaired_read_count, RPK), "
"0","                           fungi_ts_ogs %>% dplyr::select(fungi_OG , unpaired_read_count, RPK))"
"0",""
"0","  #summarize counts"
"0",""
"0","  fungi_ogs_counts <- fungi_ogs_combined %>%"
"0","  group_by(fungi_OG) %>% summarise(read_count_sum=sum(unpaired_read_count), RPK_sum = sum(RPK))"
"0",""
"0","  fungi_ogs_counts$LIBID <- x"
"0","  "
"0","  fungi_ogs_counts$feature_class <- ""fungi_OG"""
"0","  "
"0","  fungi_ogs_counts$fungi_OG <- paste0(fungi_ogs_counts$fungi_OG,""|Fungi"")"
"0","  "
"0","  fungi_ogs_counts <- fungi_ogs_counts %>% dplyr::rename(OG=fungi_OG)"
"0","  "
"0","  ##################"
"0","  ##  For Viruses ##"
"0","  ##################"
"0","  "
"0","  "
"0","   virus_ogs <- longitudinal_mtx_pangene_features[[x]] %>% dplyr::filter(emapper_OG != ""-"") %>% "
"0","  dplyr::filter(str_detect(string=.$emapper_OG, pattern=""Virus""))"
"0",""
"0","   #If there are multiple OGs belonging to virus, then this function just takes the more specific/narrower (right-most) term that is still ""virus""."
"0","  "
"0","  if (nrow(virus_ogs)>=1){"
"0","    virus_ogs$virus_OG <- gsub(pattern = ""(.*)(@10239\\|Viruses.*)"", replacement = ""\\1"",virus_ogs$emapper_OG)"
"0","  }"
"0","  "
"0",""
"0","  #Extract virus OGs from translated search (ts) results"
"0","  virus_ts_ogs <- longitudinal_mtx_uniref90_features[[x]] %>% dplyr::filter(emapper_max_annot_OG != ""-"") %>% "
"0","  dplyr::filter(str_detect(string=.$emapper_OG, pattern=""Virus""))"
"0","  "
"0","   if (nrow(virus_ts_ogs)>=1){"
"0","    virus_ts_ogs$virus_OG <- gsub(pattern = ""(.*)(@10239\\|Viruses.*)"", replacement = ""\\1"",virus_ts_ogs$emapper_OG)"
"0","  }"
"0",""
"0","  #combine them"
"0","  "
"0","  if (nrow(virus_ogs)>=1 & nrow(virus_ts_ogs)>=1){"
"0","    virus_ogs_combined <- rbind(virus_ogs %>% dplyr::select(virus_OG , unpaired_read_count, RPK), "
"0","                           virus_ts_ogs %>% dplyr::select(virus_OG , unpaired_read_count, RPK))"
"0","  } else if (nrow(virus_ogs) >= 1 & nrow(virus_ts_ogs)==0){"
"0","    virus_ogs_combined <- virus_ogs %>% dplyr::select(virus_OG , unpaired_read_count, RPK)"
"0","  } else if (nrow(virus_ogs) == 0 & nrow(virus_ts_ogs) >=1){"
"0","    virus_ogs_combined <- virus_ts_ogs %>% dplyr::select(virus_OG , unpaired_read_count, RPK)"
"0","  } else {"
"0","    virus_ogs_combined <- data.frame(virus_OG=""placeholder_feature"","
"0","                                     unpaired_read_count=0, RPK=0)"
"0","  }"
"0","  "
"0",""
"0","  #summarize counts"
"0",""
"0","  virus_ogs_counts <- virus_ogs_combined %>%"
"0","  group_by(virus_OG) %>% summarise(read_count_sum=sum(unpaired_read_count), RPK_sum = sum(RPK))"
"0",""
"0","  virus_ogs_counts$LIBID <- x"
"0","  "
"0","  virus_ogs_counts$feature_class <- ""virus_OG"""
"0","  "
"0","  virus_ogs_counts$virus_OG <- paste0(virus_ogs_counts$virus_OG,""|Virus"")"
"0","  "
"0","  virus_ogs_counts <- virus_ogs_counts %>% dplyr::rename(OG=virus_OG)"
"0","  "
"0","  #combining bacteria, fungi and virus OG count information"
"0","  all_OGs_counts_out <- do.call(""rbind"", list(bact_ogs_counts, fungi_ogs_counts, virus_ogs_counts))"
"0","  "
"0","  #The TPM calculation here only takes into account features with OG annotation"
"0","  #This is a fair QC because downstream analyses like DESeq2 were only at the OG level "
"0","  scaling_factor <- (sum(all_OGs_counts_out$RPK_sum))/1000000  #scaling factor per million"
"0","  "
"0","  all_OGs_counts_out$TPM <- all_OGs_counts_out$RPK_sum/scaling_factor"
"0","  "
"0","  return(all_OGs_counts_out)"
"0","  "
"0","  "
"0","})"
"0",""
"0",""
"0","longitudinal_OG_counts <- do.call(""rbind"", longitudinal_OG_counts)"
"0",""
"0","###"
"0",""
"0",""
"0",""
"0",""
"0",""
